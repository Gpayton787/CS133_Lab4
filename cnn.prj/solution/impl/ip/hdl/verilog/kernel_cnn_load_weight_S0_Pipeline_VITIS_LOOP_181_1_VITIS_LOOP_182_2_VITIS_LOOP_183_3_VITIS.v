// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_weight_AWVALID,
        m_axi_kernel_weight_AWREADY,
        m_axi_kernel_weight_AWADDR,
        m_axi_kernel_weight_AWID,
        m_axi_kernel_weight_AWLEN,
        m_axi_kernel_weight_AWSIZE,
        m_axi_kernel_weight_AWBURST,
        m_axi_kernel_weight_AWLOCK,
        m_axi_kernel_weight_AWCACHE,
        m_axi_kernel_weight_AWPROT,
        m_axi_kernel_weight_AWQOS,
        m_axi_kernel_weight_AWREGION,
        m_axi_kernel_weight_AWUSER,
        m_axi_kernel_weight_WVALID,
        m_axi_kernel_weight_WREADY,
        m_axi_kernel_weight_WDATA,
        m_axi_kernel_weight_WSTRB,
        m_axi_kernel_weight_WLAST,
        m_axi_kernel_weight_WID,
        m_axi_kernel_weight_WUSER,
        m_axi_kernel_weight_ARVALID,
        m_axi_kernel_weight_ARREADY,
        m_axi_kernel_weight_ARADDR,
        m_axi_kernel_weight_ARID,
        m_axi_kernel_weight_ARLEN,
        m_axi_kernel_weight_ARSIZE,
        m_axi_kernel_weight_ARBURST,
        m_axi_kernel_weight_ARLOCK,
        m_axi_kernel_weight_ARCACHE,
        m_axi_kernel_weight_ARPROT,
        m_axi_kernel_weight_ARQOS,
        m_axi_kernel_weight_ARREGION,
        m_axi_kernel_weight_ARUSER,
        m_axi_kernel_weight_RVALID,
        m_axi_kernel_weight_RREADY,
        m_axi_kernel_weight_RDATA,
        m_axi_kernel_weight_RLAST,
        m_axi_kernel_weight_RID,
        m_axi_kernel_weight_RFIFONUM,
        m_axi_kernel_weight_RUSER,
        m_axi_kernel_weight_RRESP,
        m_axi_kernel_weight_BVALID,
        m_axi_kernel_weight_BREADY,
        m_axi_kernel_weight_BRESP,
        m_axi_kernel_weight_BID,
        m_axi_kernel_weight_BUSER,
        sext_ln181,
        weight_0_0_address0,
        weight_0_0_ce0,
        weight_0_0_we0,
        weight_0_0_d0,
        weight_0_1_address0,
        weight_0_1_ce0,
        weight_0_1_we0,
        weight_0_1_d0,
        weight_0_2_address0,
        weight_0_2_ce0,
        weight_0_2_we0,
        weight_0_2_d0,
        weight_0_3_address0,
        weight_0_3_ce0,
        weight_0_3_we0,
        weight_0_3_d0,
        weight_0_4_address0,
        weight_0_4_ce0,
        weight_0_4_we0,
        weight_0_4_d0,
        weight_1_0_address0,
        weight_1_0_ce0,
        weight_1_0_we0,
        weight_1_0_d0,
        weight_1_1_address0,
        weight_1_1_ce0,
        weight_1_1_we0,
        weight_1_1_d0,
        weight_1_2_address0,
        weight_1_2_ce0,
        weight_1_2_we0,
        weight_1_2_d0,
        weight_1_3_address0,
        weight_1_3_ce0,
        weight_1_3_we0,
        weight_1_3_d0,
        weight_1_4_address0,
        weight_1_4_ce0,
        weight_1_4_we0,
        weight_1_4_d0,
        weight_2_0_address0,
        weight_2_0_ce0,
        weight_2_0_we0,
        weight_2_0_d0,
        weight_2_1_address0,
        weight_2_1_ce0,
        weight_2_1_we0,
        weight_2_1_d0,
        weight_2_2_address0,
        weight_2_2_ce0,
        weight_2_2_we0,
        weight_2_2_d0,
        weight_2_3_address0,
        weight_2_3_ce0,
        weight_2_3_we0,
        weight_2_3_d0,
        weight_2_4_address0,
        weight_2_4_ce0,
        weight_2_4_we0,
        weight_2_4_d0,
        weight_3_0_address0,
        weight_3_0_ce0,
        weight_3_0_we0,
        weight_3_0_d0,
        weight_3_1_address0,
        weight_3_1_ce0,
        weight_3_1_we0,
        weight_3_1_d0,
        weight_3_2_address0,
        weight_3_2_ce0,
        weight_3_2_we0,
        weight_3_2_d0,
        weight_3_3_address0,
        weight_3_3_ce0,
        weight_3_3_we0,
        weight_3_3_d0,
        weight_3_4_address0,
        weight_3_4_ce0,
        weight_3_4_we0,
        weight_3_4_d0,
        weight_4_0_address0,
        weight_4_0_ce0,
        weight_4_0_we0,
        weight_4_0_d0,
        weight_4_1_address0,
        weight_4_1_ce0,
        weight_4_1_we0,
        weight_4_1_d0,
        weight_4_2_address0,
        weight_4_2_ce0,
        weight_4_2_we0,
        weight_4_2_d0,
        weight_4_3_address0,
        weight_4_3_ce0,
        weight_4_3_we0,
        weight_4_3_d0,
        weight_4_4_address0,
        weight_4_4_ce0,
        weight_4_4_we0,
        weight_4_4_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_weight_AWVALID;
input   m_axi_kernel_weight_AWREADY;
output  [63:0] m_axi_kernel_weight_AWADDR;
output  [0:0] m_axi_kernel_weight_AWID;
output  [31:0] m_axi_kernel_weight_AWLEN;
output  [2:0] m_axi_kernel_weight_AWSIZE;
output  [1:0] m_axi_kernel_weight_AWBURST;
output  [1:0] m_axi_kernel_weight_AWLOCK;
output  [3:0] m_axi_kernel_weight_AWCACHE;
output  [2:0] m_axi_kernel_weight_AWPROT;
output  [3:0] m_axi_kernel_weight_AWQOS;
output  [3:0] m_axi_kernel_weight_AWREGION;
output  [0:0] m_axi_kernel_weight_AWUSER;
output   m_axi_kernel_weight_WVALID;
input   m_axi_kernel_weight_WREADY;
output  [31:0] m_axi_kernel_weight_WDATA;
output  [3:0] m_axi_kernel_weight_WSTRB;
output   m_axi_kernel_weight_WLAST;
output  [0:0] m_axi_kernel_weight_WID;
output  [0:0] m_axi_kernel_weight_WUSER;
output   m_axi_kernel_weight_ARVALID;
input   m_axi_kernel_weight_ARREADY;
output  [63:0] m_axi_kernel_weight_ARADDR;
output  [0:0] m_axi_kernel_weight_ARID;
output  [31:0] m_axi_kernel_weight_ARLEN;
output  [2:0] m_axi_kernel_weight_ARSIZE;
output  [1:0] m_axi_kernel_weight_ARBURST;
output  [1:0] m_axi_kernel_weight_ARLOCK;
output  [3:0] m_axi_kernel_weight_ARCACHE;
output  [2:0] m_axi_kernel_weight_ARPROT;
output  [3:0] m_axi_kernel_weight_ARQOS;
output  [3:0] m_axi_kernel_weight_ARREGION;
output  [0:0] m_axi_kernel_weight_ARUSER;
input   m_axi_kernel_weight_RVALID;
output   m_axi_kernel_weight_RREADY;
input  [31:0] m_axi_kernel_weight_RDATA;
input   m_axi_kernel_weight_RLAST;
input  [0:0] m_axi_kernel_weight_RID;
input  [8:0] m_axi_kernel_weight_RFIFONUM;
input  [0:0] m_axi_kernel_weight_RUSER;
input  [1:0] m_axi_kernel_weight_RRESP;
input   m_axi_kernel_weight_BVALID;
output   m_axi_kernel_weight_BREADY;
input  [1:0] m_axi_kernel_weight_BRESP;
input  [0:0] m_axi_kernel_weight_BID;
input  [0:0] m_axi_kernel_weight_BUSER;
input  [61:0] sext_ln181;
output  [11:0] weight_0_0_address0;
output   weight_0_0_ce0;
output   weight_0_0_we0;
output  [31:0] weight_0_0_d0;
output  [11:0] weight_0_1_address0;
output   weight_0_1_ce0;
output   weight_0_1_we0;
output  [31:0] weight_0_1_d0;
output  [11:0] weight_0_2_address0;
output   weight_0_2_ce0;
output   weight_0_2_we0;
output  [31:0] weight_0_2_d0;
output  [11:0] weight_0_3_address0;
output   weight_0_3_ce0;
output   weight_0_3_we0;
output  [31:0] weight_0_3_d0;
output  [11:0] weight_0_4_address0;
output   weight_0_4_ce0;
output   weight_0_4_we0;
output  [31:0] weight_0_4_d0;
output  [11:0] weight_1_0_address0;
output   weight_1_0_ce0;
output   weight_1_0_we0;
output  [31:0] weight_1_0_d0;
output  [11:0] weight_1_1_address0;
output   weight_1_1_ce0;
output   weight_1_1_we0;
output  [31:0] weight_1_1_d0;
output  [11:0] weight_1_2_address0;
output   weight_1_2_ce0;
output   weight_1_2_we0;
output  [31:0] weight_1_2_d0;
output  [11:0] weight_1_3_address0;
output   weight_1_3_ce0;
output   weight_1_3_we0;
output  [31:0] weight_1_3_d0;
output  [11:0] weight_1_4_address0;
output   weight_1_4_ce0;
output   weight_1_4_we0;
output  [31:0] weight_1_4_d0;
output  [11:0] weight_2_0_address0;
output   weight_2_0_ce0;
output   weight_2_0_we0;
output  [31:0] weight_2_0_d0;
output  [11:0] weight_2_1_address0;
output   weight_2_1_ce0;
output   weight_2_1_we0;
output  [31:0] weight_2_1_d0;
output  [11:0] weight_2_2_address0;
output   weight_2_2_ce0;
output   weight_2_2_we0;
output  [31:0] weight_2_2_d0;
output  [11:0] weight_2_3_address0;
output   weight_2_3_ce0;
output   weight_2_3_we0;
output  [31:0] weight_2_3_d0;
output  [11:0] weight_2_4_address0;
output   weight_2_4_ce0;
output   weight_2_4_we0;
output  [31:0] weight_2_4_d0;
output  [11:0] weight_3_0_address0;
output   weight_3_0_ce0;
output   weight_3_0_we0;
output  [31:0] weight_3_0_d0;
output  [11:0] weight_3_1_address0;
output   weight_3_1_ce0;
output   weight_3_1_we0;
output  [31:0] weight_3_1_d0;
output  [11:0] weight_3_2_address0;
output   weight_3_2_ce0;
output   weight_3_2_we0;
output  [31:0] weight_3_2_d0;
output  [11:0] weight_3_3_address0;
output   weight_3_3_ce0;
output   weight_3_3_we0;
output  [31:0] weight_3_3_d0;
output  [11:0] weight_3_4_address0;
output   weight_3_4_ce0;
output   weight_3_4_we0;
output  [31:0] weight_3_4_d0;
output  [11:0] weight_4_0_address0;
output   weight_4_0_ce0;
output   weight_4_0_we0;
output  [31:0] weight_4_0_d0;
output  [11:0] weight_4_1_address0;
output   weight_4_1_ce0;
output   weight_4_1_we0;
output  [31:0] weight_4_1_d0;
output  [11:0] weight_4_2_address0;
output   weight_4_2_ce0;
output   weight_4_2_we0;
output  [31:0] weight_4_2_d0;
output  [11:0] weight_4_3_address0;
output   weight_4_3_ce0;
output   weight_4_3_we0;
output  [31:0] weight_4_3_d0;
output  [11:0] weight_4_4_address0;
output   weight_4_4_ce0;
output   weight_4_4_we0;
output  [31:0] weight_4_4_d0;

reg ap_idle;
reg m_axi_kernel_weight_RREADY;
reg weight_0_0_ce0;
reg weight_0_0_we0;
reg weight_0_1_ce0;
reg weight_0_1_we0;
reg weight_0_2_ce0;
reg weight_0_2_we0;
reg weight_0_3_ce0;
reg weight_0_3_we0;
reg weight_0_4_ce0;
reg weight_0_4_we0;
reg weight_1_0_ce0;
reg weight_1_0_we0;
reg weight_1_1_ce0;
reg weight_1_1_we0;
reg weight_1_2_ce0;
reg weight_1_2_we0;
reg weight_1_3_ce0;
reg weight_1_3_we0;
reg weight_1_4_ce0;
reg weight_1_4_we0;
reg weight_2_0_ce0;
reg weight_2_0_we0;
reg weight_2_1_ce0;
reg weight_2_1_we0;
reg weight_2_2_ce0;
reg weight_2_2_we0;
reg weight_2_3_ce0;
reg weight_2_3_we0;
reg weight_2_4_ce0;
reg weight_2_4_we0;
reg weight_3_0_ce0;
reg weight_3_0_we0;
reg weight_3_1_ce0;
reg weight_3_1_we0;
reg weight_3_2_ce0;
reg weight_3_2_we0;
reg weight_3_3_ce0;
reg weight_3_3_we0;
reg weight_3_4_ce0;
reg weight_3_4_we0;
reg weight_4_0_ce0;
reg weight_4_0_we0;
reg weight_4_1_ce0;
reg weight_4_1_we0;
reg weight_4_2_ce0;
reg weight_4_2_we0;
reg weight_4_3_ce0;
reg weight_4_3_we0;
reg weight_4_4_ce0;
reg weight_4_4_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln181_reg_883;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln181_fu_541_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_weight_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln182_fu_553_p2;
reg   [0:0] icmp_ln182_reg_887;
wire   [2:0] select_ln183_fu_718_p3;
reg   [2:0] select_ln183_reg_897;
wire   [2:0] select_ln183_1_fu_726_p3;
reg   [2:0] select_ln183_1_reg_901;
wire   [11:0] empty_fu_746_p2;
reg   [11:0] empty_reg_905;
wire   [31:0] bitcast_ln198_fu_752_p1;
reg   [31:0] bitcast_ln198_reg_910;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] p_cast_fu_801_p1;
reg   [2:0] i3_fu_132;
wire   [2:0] add_ln184_fu_756_p2;
wire    ap_loop_init;
reg   [2:0] i2_fu_136;
reg   [5:0] indvar_flatten_fu_140;
wire   [5:0] select_ln183_2_fu_768_p3;
reg   [8:0] i1_fu_144;
wire   [8:0] select_ln182_1_fu_693_p3;
reg   [13:0] indvar_flatten12_fu_148;
wire   [13:0] select_ln182_2_fu_565_p3;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [4:0] i0_fu_152;
wire   [4:0] select_ln181_1_fu_640_p3;
reg   [16:0] indvar_flatten34_fu_156;
wire   [16:0] add_ln181_fu_547_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten34_load;
wire   [13:0] add_ln182_1_fu_559_p2;
wire   [0:0] icmp_ln183_fu_628_p2;
wire   [0:0] xor_ln181_fu_617_p2;
wire   [4:0] add_ln181_1_fu_604_p2;
wire   [8:0] select_ln181_fu_610_p3;
wire   [0:0] and_ln181_1_fu_634_p2;
wire   [0:0] or_ln182_fu_657_p2;
wire   [0:0] xor_ln182_fu_670_p2;
wire   [0:0] or_ln182_1_fu_676_p2;
wire   [0:0] and_ln181_fu_681_p2;
wire   [0:0] icmp_ln184_fu_622_p2;
wire   [8:0] add_ln182_fu_651_p2;
wire   [2:0] select_ln182_fu_662_p3;
wire   [0:0] and_ln182_fu_687_p2;
wire   [0:0] or_ln183_fu_707_p2;
wire   [0:0] or_ln183_1_fu_713_p2;
wire   [2:0] add_ln183_fu_701_p2;
wire   [3:0] trunc_ln182_fu_647_p1;
wire   [11:0] tmp_fu_734_p3;
wire   [11:0] select_ln182_1_cast_fu_742_p1;
wire   [5:0] add_ln183_1_fu_762_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i3_fu_132 = 3'd0;
#0 i2_fu_136 = 3'd0;
#0 indvar_flatten_fu_140 = 6'd0;
#0 i1_fu_144 = 9'd0;
#0 indvar_flatten12_fu_148 = 14'd0;
#0 i0_fu_152 = 5'd0;
#0 indvar_flatten34_fu_156 = 17'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i0_fu_152 <= 5'd0;
        end else if (((icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i0_fu_152 <= select_ln181_1_fu_640_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i1_fu_144 <= 9'd0;
        end else if (((icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i1_fu_144 <= select_ln182_1_fu_693_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i2_fu_136 <= 3'd0;
        end else if (((icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i2_fu_136 <= select_ln183_1_fu_726_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i3_fu_132 <= 3'd0;
        end else if (((icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i3_fu_132 <= add_ln184_fu_756_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln181_fu_541_p2 == 1'd0))) begin
            indvar_flatten12_fu_148 <= select_ln182_2_fu_565_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_148 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln181_fu_541_p2 == 1'd0))) begin
            indvar_flatten34_fu_156 <= add_ln181_fu_547_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_156 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 6'd0;
        end else if (((icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_140 <= select_ln183_2_fu_768_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bitcast_ln198_reg_910 <= bitcast_ln198_fu_752_p1;
        empty_reg_905 <= empty_fu_746_p2;
        icmp_ln181_reg_883 <= icmp_ln181_fu_541_p2;
        icmp_ln182_reg_887 <= icmp_ln182_fu_553_p2;
        select_ln183_1_reg_901 <= select_ln183_1_fu_726_p3;
        select_ln183_reg_897 <= select_ln183_fu_718_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln181_fu_541_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln181_reg_883 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_156;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_weight_blk_n_R = m_axi_kernel_weight_RVALID;
    end else begin
        kernel_weight_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_reg_883 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_kernel_weight_RREADY = 1'b1;
    end else begin
        m_axi_kernel_weight_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_0_ce0 = 1'b1;
    end else begin
        weight_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd0) & (select_ln183_reg_897 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_0_we0 = 1'b1;
    end else begin
        weight_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_1_ce0 = 1'b1;
    end else begin
        weight_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd0) & (select_ln183_reg_897 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_1_we0 = 1'b1;
    end else begin
        weight_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_2_ce0 = 1'b1;
    end else begin
        weight_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd0) & (select_ln183_reg_897 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_2_we0 = 1'b1;
    end else begin
        weight_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_3_ce0 = 1'b1;
    end else begin
        weight_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd0) & (select_ln183_reg_897 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_3_we0 = 1'b1;
    end else begin
        weight_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_4_ce0 = 1'b1;
    end else begin
        weight_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_reg_897 == 3'd0) & ~(select_ln183_reg_897 == 3'd1) & ~(select_ln183_reg_897 == 3'd2) & ~(select_ln183_reg_897 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_0_4_we0 = 1'b1;
    end else begin
        weight_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_0_ce0 = 1'b1;
    end else begin
        weight_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd1) & (select_ln183_reg_897 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_0_we0 = 1'b1;
    end else begin
        weight_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_1_ce0 = 1'b1;
    end else begin
        weight_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd1) & (select_ln183_reg_897 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_1_we0 = 1'b1;
    end else begin
        weight_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_2_ce0 = 1'b1;
    end else begin
        weight_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd1) & (select_ln183_reg_897 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_2_we0 = 1'b1;
    end else begin
        weight_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_3_ce0 = 1'b1;
    end else begin
        weight_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd1) & (select_ln183_reg_897 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_3_we0 = 1'b1;
    end else begin
        weight_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_4_ce0 = 1'b1;
    end else begin
        weight_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_reg_897 == 3'd0) & ~(select_ln183_reg_897 == 3'd1) & ~(select_ln183_reg_897 == 3'd2) & ~(select_ln183_reg_897 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_1_4_we0 = 1'b1;
    end else begin
        weight_1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_0_ce0 = 1'b1;
    end else begin
        weight_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd2) & (select_ln183_reg_897 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_0_we0 = 1'b1;
    end else begin
        weight_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_1_ce0 = 1'b1;
    end else begin
        weight_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd2) & (select_ln183_reg_897 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_1_we0 = 1'b1;
    end else begin
        weight_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_2_ce0 = 1'b1;
    end else begin
        weight_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd2) & (select_ln183_reg_897 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_2_we0 = 1'b1;
    end else begin
        weight_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_3_ce0 = 1'b1;
    end else begin
        weight_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd2) & (select_ln183_reg_897 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_3_we0 = 1'b1;
    end else begin
        weight_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_4_ce0 = 1'b1;
    end else begin
        weight_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_reg_897 == 3'd0) & ~(select_ln183_reg_897 == 3'd1) & ~(select_ln183_reg_897 == 3'd2) & ~(select_ln183_reg_897 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_2_4_we0 = 1'b1;
    end else begin
        weight_2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_0_ce0 = 1'b1;
    end else begin
        weight_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd3) & (select_ln183_reg_897 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_0_we0 = 1'b1;
    end else begin
        weight_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_1_ce0 = 1'b1;
    end else begin
        weight_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd3) & (select_ln183_reg_897 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_1_we0 = 1'b1;
    end else begin
        weight_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_2_ce0 = 1'b1;
    end else begin
        weight_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd3) & (select_ln183_reg_897 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_2_we0 = 1'b1;
    end else begin
        weight_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_3_ce0 = 1'b1;
    end else begin
        weight_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd3) & (select_ln183_reg_897 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_3_we0 = 1'b1;
    end else begin
        weight_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_4_ce0 = 1'b1;
    end else begin
        weight_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_reg_897 == 3'd0) & ~(select_ln183_reg_897 == 3'd1) & ~(select_ln183_reg_897 == 3'd2) & ~(select_ln183_reg_897 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_1_reg_901 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_3_4_we0 = 1'b1;
    end else begin
        weight_3_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_0_ce0 = 1'b1;
    end else begin
        weight_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_1_reg_901 == 3'd0) & ~(select_ln183_1_reg_901 == 3'd1) & ~(select_ln183_1_reg_901 == 3'd2) & ~(select_ln183_1_reg_901 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_reg_897 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_0_we0 = 1'b1;
    end else begin
        weight_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_1_ce0 = 1'b1;
    end else begin
        weight_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_1_reg_901 == 3'd0) & ~(select_ln183_1_reg_901 == 3'd1) & ~(select_ln183_1_reg_901 == 3'd2) & ~(select_ln183_1_reg_901 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_reg_897 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_1_we0 = 1'b1;
    end else begin
        weight_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_2_ce0 = 1'b1;
    end else begin
        weight_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_1_reg_901 == 3'd0) & ~(select_ln183_1_reg_901 == 3'd1) & ~(select_ln183_1_reg_901 == 3'd2) & ~(select_ln183_1_reg_901 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_reg_897 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_2_we0 = 1'b1;
    end else begin
        weight_4_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_3_ce0 = 1'b1;
    end else begin
        weight_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_1_reg_901 == 3'd0) & ~(select_ln183_1_reg_901 == 3'd1) & ~(select_ln183_1_reg_901 == 3'd2) & ~(select_ln183_1_reg_901 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln183_reg_897 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_3_we0 = 1'b1;
    end else begin
        weight_4_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_4_ce0 = 1'b1;
    end else begin
        weight_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln183_1_reg_901 == 3'd0) & ~(select_ln183_1_reg_901 == 3'd1) & ~(select_ln183_1_reg_901 == 3'd2) & ~(select_ln183_reg_897 == 3'd0) & ~(select_ln183_reg_897 == 3'd1) & ~(select_ln183_reg_897 == 3'd2) & ~(select_ln183_reg_897 == 3'd3) & ~(select_ln183_1_reg_901 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_4_4_we0 = 1'b1;
    end else begin
        weight_4_4_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln181_1_fu_604_p2 = (i0_fu_152 + 5'd1);

assign add_ln181_fu_547_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 17'd1);

assign add_ln182_1_fu_559_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln182_fu_651_p2 = (select_ln181_fu_610_p3 + 9'd1);

assign add_ln183_1_fu_762_p2 = (indvar_flatten_fu_140 + 6'd1);

assign add_ln183_fu_701_p2 = (select_ln182_fu_662_p3 + 3'd1);

assign add_ln184_fu_756_p2 = (select_ln183_fu_718_p3 + 3'd1);

assign and_ln181_1_fu_634_p2 = (xor_ln181_fu_617_p2 & icmp_ln183_fu_628_p2);

assign and_ln181_fu_681_p2 = (xor_ln181_fu_617_p2 & or_ln182_1_fu_676_p2);

assign and_ln182_fu_687_p2 = (icmp_ln184_fu_622_p2 & and_ln181_fu_681_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln181_reg_883 == 1'd0) & (m_axi_kernel_weight_RVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln198_fu_752_p1 = m_axi_kernel_weight_RDATA;

assign empty_fu_746_p2 = (tmp_fu_734_p3 + select_ln182_1_cast_fu_742_p1);

assign icmp_ln181_fu_541_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_553_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd6400) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_628_p2 = ((indvar_flatten_fu_140 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_622_p2 = ((i3_fu_132 == 3'd5) ? 1'b1 : 1'b0);

assign m_axi_kernel_weight_ARADDR = 64'd0;

assign m_axi_kernel_weight_ARBURST = 2'd0;

assign m_axi_kernel_weight_ARCACHE = 4'd0;

assign m_axi_kernel_weight_ARID = 1'd0;

assign m_axi_kernel_weight_ARLEN = 32'd0;

assign m_axi_kernel_weight_ARLOCK = 2'd0;

assign m_axi_kernel_weight_ARPROT = 3'd0;

assign m_axi_kernel_weight_ARQOS = 4'd0;

assign m_axi_kernel_weight_ARREGION = 4'd0;

assign m_axi_kernel_weight_ARSIZE = 3'd0;

assign m_axi_kernel_weight_ARUSER = 1'd0;

assign m_axi_kernel_weight_ARVALID = 1'b0;

assign m_axi_kernel_weight_AWADDR = 64'd0;

assign m_axi_kernel_weight_AWBURST = 2'd0;

assign m_axi_kernel_weight_AWCACHE = 4'd0;

assign m_axi_kernel_weight_AWID = 1'd0;

assign m_axi_kernel_weight_AWLEN = 32'd0;

assign m_axi_kernel_weight_AWLOCK = 2'd0;

assign m_axi_kernel_weight_AWPROT = 3'd0;

assign m_axi_kernel_weight_AWQOS = 4'd0;

assign m_axi_kernel_weight_AWREGION = 4'd0;

assign m_axi_kernel_weight_AWSIZE = 3'd0;

assign m_axi_kernel_weight_AWUSER = 1'd0;

assign m_axi_kernel_weight_AWVALID = 1'b0;

assign m_axi_kernel_weight_BREADY = 1'b0;

assign m_axi_kernel_weight_WDATA = 32'd0;

assign m_axi_kernel_weight_WID = 1'd0;

assign m_axi_kernel_weight_WLAST = 1'b0;

assign m_axi_kernel_weight_WSTRB = 4'd0;

assign m_axi_kernel_weight_WUSER = 1'd0;

assign m_axi_kernel_weight_WVALID = 1'b0;

assign or_ln182_1_fu_676_p2 = (xor_ln182_fu_670_p2 | icmp_ln182_reg_887);

assign or_ln182_fu_657_p2 = (icmp_ln182_reg_887 | and_ln181_1_fu_634_p2);

assign or_ln183_1_fu_713_p2 = (or_ln183_fu_707_p2 | icmp_ln182_reg_887);

assign or_ln183_fu_707_p2 = (and_ln182_fu_687_p2 | and_ln181_1_fu_634_p2);

assign p_cast_fu_801_p1 = empty_reg_905;

assign select_ln181_1_fu_640_p3 = ((icmp_ln182_reg_887[0:0] == 1'b1) ? add_ln181_1_fu_604_p2 : i0_fu_152);

assign select_ln181_fu_610_p3 = ((icmp_ln182_reg_887[0:0] == 1'b1) ? 9'd0 : i1_fu_144);

assign select_ln182_1_cast_fu_742_p1 = select_ln182_1_fu_693_p3;

assign select_ln182_1_fu_693_p3 = ((and_ln181_1_fu_634_p2[0:0] == 1'b1) ? add_ln182_fu_651_p2 : select_ln181_fu_610_p3);

assign select_ln182_2_fu_565_p3 = ((icmp_ln182_fu_553_p2[0:0] == 1'b1) ? 14'd1 : add_ln182_1_fu_559_p2);

assign select_ln182_fu_662_p3 = ((or_ln182_fu_657_p2[0:0] == 1'b1) ? 3'd0 : i2_fu_136);

assign select_ln183_1_fu_726_p3 = ((and_ln182_fu_687_p2[0:0] == 1'b1) ? add_ln183_fu_701_p2 : select_ln182_fu_662_p3);

assign select_ln183_2_fu_768_p3 = ((or_ln182_fu_657_p2[0:0] == 1'b1) ? 6'd1 : add_ln183_1_fu_762_p2);

assign select_ln183_fu_718_p3 = ((or_ln183_1_fu_713_p2[0:0] == 1'b1) ? 3'd0 : i3_fu_132);

assign tmp_fu_734_p3 = {{trunc_ln182_fu_647_p1}, {8'd0}};

assign trunc_ln182_fu_647_p1 = select_ln181_1_fu_640_p3[3:0];

assign weight_0_0_address0 = p_cast_fu_801_p1;

assign weight_0_0_d0 = bitcast_ln198_reg_910;

assign weight_0_1_address0 = p_cast_fu_801_p1;

assign weight_0_1_d0 = bitcast_ln198_reg_910;

assign weight_0_2_address0 = p_cast_fu_801_p1;

assign weight_0_2_d0 = bitcast_ln198_reg_910;

assign weight_0_3_address0 = p_cast_fu_801_p1;

assign weight_0_3_d0 = bitcast_ln198_reg_910;

assign weight_0_4_address0 = p_cast_fu_801_p1;

assign weight_0_4_d0 = bitcast_ln198_reg_910;

assign weight_1_0_address0 = p_cast_fu_801_p1;

assign weight_1_0_d0 = bitcast_ln198_reg_910;

assign weight_1_1_address0 = p_cast_fu_801_p1;

assign weight_1_1_d0 = bitcast_ln198_reg_910;

assign weight_1_2_address0 = p_cast_fu_801_p1;

assign weight_1_2_d0 = bitcast_ln198_reg_910;

assign weight_1_3_address0 = p_cast_fu_801_p1;

assign weight_1_3_d0 = bitcast_ln198_reg_910;

assign weight_1_4_address0 = p_cast_fu_801_p1;

assign weight_1_4_d0 = bitcast_ln198_reg_910;

assign weight_2_0_address0 = p_cast_fu_801_p1;

assign weight_2_0_d0 = bitcast_ln198_reg_910;

assign weight_2_1_address0 = p_cast_fu_801_p1;

assign weight_2_1_d0 = bitcast_ln198_reg_910;

assign weight_2_2_address0 = p_cast_fu_801_p1;

assign weight_2_2_d0 = bitcast_ln198_reg_910;

assign weight_2_3_address0 = p_cast_fu_801_p1;

assign weight_2_3_d0 = bitcast_ln198_reg_910;

assign weight_2_4_address0 = p_cast_fu_801_p1;

assign weight_2_4_d0 = bitcast_ln198_reg_910;

assign weight_3_0_address0 = p_cast_fu_801_p1;

assign weight_3_0_d0 = bitcast_ln198_reg_910;

assign weight_3_1_address0 = p_cast_fu_801_p1;

assign weight_3_1_d0 = bitcast_ln198_reg_910;

assign weight_3_2_address0 = p_cast_fu_801_p1;

assign weight_3_2_d0 = bitcast_ln198_reg_910;

assign weight_3_3_address0 = p_cast_fu_801_p1;

assign weight_3_3_d0 = bitcast_ln198_reg_910;

assign weight_3_4_address0 = p_cast_fu_801_p1;

assign weight_3_4_d0 = bitcast_ln198_reg_910;

assign weight_4_0_address0 = p_cast_fu_801_p1;

assign weight_4_0_d0 = bitcast_ln198_reg_910;

assign weight_4_1_address0 = p_cast_fu_801_p1;

assign weight_4_1_d0 = bitcast_ln198_reg_910;

assign weight_4_2_address0 = p_cast_fu_801_p1;

assign weight_4_2_d0 = bitcast_ln198_reg_910;

assign weight_4_3_address0 = p_cast_fu_801_p1;

assign weight_4_3_d0 = bitcast_ln198_reg_910;

assign weight_4_4_address0 = p_cast_fu_801_p1;

assign weight_4_4_d0 = bitcast_ln198_reg_910;

assign xor_ln181_fu_617_p2 = (icmp_ln182_reg_887 ^ 1'd1);

assign xor_ln182_fu_670_p2 = (icmp_ln183_fu_628_p2 ^ 1'd1);

endmodule //kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS
