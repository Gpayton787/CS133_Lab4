// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_load_output_S0_Pipeline_VITIS_LOOP_112_1_VITIS_LOOP_113_2_VITIS_LOOP_114_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_output_AWVALID,
        m_axi_kernel_output_AWREADY,
        m_axi_kernel_output_AWADDR,
        m_axi_kernel_output_AWID,
        m_axi_kernel_output_AWLEN,
        m_axi_kernel_output_AWSIZE,
        m_axi_kernel_output_AWBURST,
        m_axi_kernel_output_AWLOCK,
        m_axi_kernel_output_AWCACHE,
        m_axi_kernel_output_AWPROT,
        m_axi_kernel_output_AWQOS,
        m_axi_kernel_output_AWREGION,
        m_axi_kernel_output_AWUSER,
        m_axi_kernel_output_WVALID,
        m_axi_kernel_output_WREADY,
        m_axi_kernel_output_WDATA,
        m_axi_kernel_output_WSTRB,
        m_axi_kernel_output_WLAST,
        m_axi_kernel_output_WID,
        m_axi_kernel_output_WUSER,
        m_axi_kernel_output_ARVALID,
        m_axi_kernel_output_ARREADY,
        m_axi_kernel_output_ARADDR,
        m_axi_kernel_output_ARID,
        m_axi_kernel_output_ARLEN,
        m_axi_kernel_output_ARSIZE,
        m_axi_kernel_output_ARBURST,
        m_axi_kernel_output_ARLOCK,
        m_axi_kernel_output_ARCACHE,
        m_axi_kernel_output_ARPROT,
        m_axi_kernel_output_ARQOS,
        m_axi_kernel_output_ARREGION,
        m_axi_kernel_output_ARUSER,
        m_axi_kernel_output_RVALID,
        m_axi_kernel_output_RREADY,
        m_axi_kernel_output_RDATA,
        m_axi_kernel_output_RLAST,
        m_axi_kernel_output_RID,
        m_axi_kernel_output_RFIFONUM,
        m_axi_kernel_output_RUSER,
        m_axi_kernel_output_RRESP,
        m_axi_kernel_output_BVALID,
        m_axi_kernel_output_BREADY,
        m_axi_kernel_output_BRESP,
        m_axi_kernel_output_BID,
        m_axi_kernel_output_BUSER,
        sext_ln112,
        output_0_0_address0,
        output_0_0_ce0,
        output_0_0_we0,
        output_0_0_d0,
        output_0_0_address1,
        output_0_0_ce1,
        output_0_0_we1,
        output_0_0_d1,
        output_0_1_address0,
        output_0_1_ce0,
        output_0_1_we0,
        output_0_1_d0,
        output_0_1_address1,
        output_0_1_ce1,
        output_0_1_we1,
        output_0_1_d1,
        output_0_2_address0,
        output_0_2_ce0,
        output_0_2_we0,
        output_0_2_d0,
        output_0_2_address1,
        output_0_2_ce1,
        output_0_2_we1,
        output_0_2_d1,
        output_0_3_address0,
        output_0_3_ce0,
        output_0_3_we0,
        output_0_3_d0,
        output_0_3_address1,
        output_0_3_ce1,
        output_0_3_we1,
        output_0_3_d1,
        output_0_4_address0,
        output_0_4_ce0,
        output_0_4_we0,
        output_0_4_d0,
        output_0_4_address1,
        output_0_4_ce1,
        output_0_4_we1,
        output_0_4_d1,
        output_0_5_address0,
        output_0_5_ce0,
        output_0_5_we0,
        output_0_5_d0,
        output_0_5_address1,
        output_0_5_ce1,
        output_0_5_we1,
        output_0_5_d1,
        output_0_6_address0,
        output_0_6_ce0,
        output_0_6_we0,
        output_0_6_d0,
        output_0_6_address1,
        output_0_6_ce1,
        output_0_6_we1,
        output_0_6_d1,
        output_0_7_address0,
        output_0_7_ce0,
        output_0_7_we0,
        output_0_7_d0,
        output_0_7_address1,
        output_0_7_ce1,
        output_0_7_we1,
        output_0_7_d1,
        output_1_0_address0,
        output_1_0_ce0,
        output_1_0_we0,
        output_1_0_d0,
        output_1_0_address1,
        output_1_0_ce1,
        output_1_0_we1,
        output_1_0_d1,
        output_1_1_address0,
        output_1_1_ce0,
        output_1_1_we0,
        output_1_1_d0,
        output_1_1_address1,
        output_1_1_ce1,
        output_1_1_we1,
        output_1_1_d1,
        output_1_2_address0,
        output_1_2_ce0,
        output_1_2_we0,
        output_1_2_d0,
        output_1_2_address1,
        output_1_2_ce1,
        output_1_2_we1,
        output_1_2_d1,
        output_1_3_address0,
        output_1_3_ce0,
        output_1_3_we0,
        output_1_3_d0,
        output_1_3_address1,
        output_1_3_ce1,
        output_1_3_we1,
        output_1_3_d1,
        output_1_4_address0,
        output_1_4_ce0,
        output_1_4_we0,
        output_1_4_d0,
        output_1_4_address1,
        output_1_4_ce1,
        output_1_4_we1,
        output_1_4_d1,
        output_1_5_address0,
        output_1_5_ce0,
        output_1_5_we0,
        output_1_5_d0,
        output_1_5_address1,
        output_1_5_ce1,
        output_1_5_we1,
        output_1_5_d1,
        output_1_6_address0,
        output_1_6_ce0,
        output_1_6_we0,
        output_1_6_d0,
        output_1_6_address1,
        output_1_6_ce1,
        output_1_6_we1,
        output_1_6_d1,
        output_1_7_address0,
        output_1_7_ce0,
        output_1_7_we0,
        output_1_7_d0,
        output_1_7_address1,
        output_1_7_ce1,
        output_1_7_we1,
        output_1_7_d1,
        output_2_0_address0,
        output_2_0_ce0,
        output_2_0_we0,
        output_2_0_d0,
        output_2_0_address1,
        output_2_0_ce1,
        output_2_0_we1,
        output_2_0_d1,
        output_2_1_address0,
        output_2_1_ce0,
        output_2_1_we0,
        output_2_1_d0,
        output_2_1_address1,
        output_2_1_ce1,
        output_2_1_we1,
        output_2_1_d1,
        output_2_2_address0,
        output_2_2_ce0,
        output_2_2_we0,
        output_2_2_d0,
        output_2_2_address1,
        output_2_2_ce1,
        output_2_2_we1,
        output_2_2_d1,
        output_2_3_address0,
        output_2_3_ce0,
        output_2_3_we0,
        output_2_3_d0,
        output_2_3_address1,
        output_2_3_ce1,
        output_2_3_we1,
        output_2_3_d1,
        output_2_4_address0,
        output_2_4_ce0,
        output_2_4_we0,
        output_2_4_d0,
        output_2_4_address1,
        output_2_4_ce1,
        output_2_4_we1,
        output_2_4_d1,
        output_2_5_address0,
        output_2_5_ce0,
        output_2_5_we0,
        output_2_5_d0,
        output_2_5_address1,
        output_2_5_ce1,
        output_2_5_we1,
        output_2_5_d1,
        output_2_6_address0,
        output_2_6_ce0,
        output_2_6_we0,
        output_2_6_d0,
        output_2_6_address1,
        output_2_6_ce1,
        output_2_6_we1,
        output_2_6_d1,
        output_2_7_address0,
        output_2_7_ce0,
        output_2_7_we0,
        output_2_7_d0,
        output_2_7_address1,
        output_2_7_ce1,
        output_2_7_we1,
        output_2_7_d1,
        output_3_0_address0,
        output_3_0_ce0,
        output_3_0_we0,
        output_3_0_d0,
        output_3_0_address1,
        output_3_0_ce1,
        output_3_0_we1,
        output_3_0_d1,
        output_3_1_address0,
        output_3_1_ce0,
        output_3_1_we0,
        output_3_1_d0,
        output_3_1_address1,
        output_3_1_ce1,
        output_3_1_we1,
        output_3_1_d1,
        output_3_2_address0,
        output_3_2_ce0,
        output_3_2_we0,
        output_3_2_d0,
        output_3_2_address1,
        output_3_2_ce1,
        output_3_2_we1,
        output_3_2_d1,
        output_3_3_address0,
        output_3_3_ce0,
        output_3_3_we0,
        output_3_3_d0,
        output_3_3_address1,
        output_3_3_ce1,
        output_3_3_we1,
        output_3_3_d1,
        output_3_4_address0,
        output_3_4_ce0,
        output_3_4_we0,
        output_3_4_d0,
        output_3_4_address1,
        output_3_4_ce1,
        output_3_4_we1,
        output_3_4_d1,
        output_3_5_address0,
        output_3_5_ce0,
        output_3_5_we0,
        output_3_5_d0,
        output_3_5_address1,
        output_3_5_ce1,
        output_3_5_we1,
        output_3_5_d1,
        output_3_6_address0,
        output_3_6_ce0,
        output_3_6_we0,
        output_3_6_d0,
        output_3_6_address1,
        output_3_6_ce1,
        output_3_6_we1,
        output_3_6_d1,
        output_3_7_address0,
        output_3_7_ce0,
        output_3_7_we0,
        output_3_7_d0,
        output_3_7_address1,
        output_3_7_ce1,
        output_3_7_we1,
        output_3_7_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_output_AWVALID;
input   m_axi_kernel_output_AWREADY;
output  [63:0] m_axi_kernel_output_AWADDR;
output  [0:0] m_axi_kernel_output_AWID;
output  [31:0] m_axi_kernel_output_AWLEN;
output  [2:0] m_axi_kernel_output_AWSIZE;
output  [1:0] m_axi_kernel_output_AWBURST;
output  [1:0] m_axi_kernel_output_AWLOCK;
output  [3:0] m_axi_kernel_output_AWCACHE;
output  [2:0] m_axi_kernel_output_AWPROT;
output  [3:0] m_axi_kernel_output_AWQOS;
output  [3:0] m_axi_kernel_output_AWREGION;
output  [0:0] m_axi_kernel_output_AWUSER;
output   m_axi_kernel_output_WVALID;
input   m_axi_kernel_output_WREADY;
output  [511:0] m_axi_kernel_output_WDATA;
output  [63:0] m_axi_kernel_output_WSTRB;
output   m_axi_kernel_output_WLAST;
output  [0:0] m_axi_kernel_output_WID;
output  [0:0] m_axi_kernel_output_WUSER;
output   m_axi_kernel_output_ARVALID;
input   m_axi_kernel_output_ARREADY;
output  [63:0] m_axi_kernel_output_ARADDR;
output  [0:0] m_axi_kernel_output_ARID;
output  [31:0] m_axi_kernel_output_ARLEN;
output  [2:0] m_axi_kernel_output_ARSIZE;
output  [1:0] m_axi_kernel_output_ARBURST;
output  [1:0] m_axi_kernel_output_ARLOCK;
output  [3:0] m_axi_kernel_output_ARCACHE;
output  [2:0] m_axi_kernel_output_ARPROT;
output  [3:0] m_axi_kernel_output_ARQOS;
output  [3:0] m_axi_kernel_output_ARREGION;
output  [0:0] m_axi_kernel_output_ARUSER;
input   m_axi_kernel_output_RVALID;
output   m_axi_kernel_output_RREADY;
input  [511:0] m_axi_kernel_output_RDATA;
input   m_axi_kernel_output_RLAST;
input  [0:0] m_axi_kernel_output_RID;
input  [8:0] m_axi_kernel_output_RFIFONUM;
input  [0:0] m_axi_kernel_output_RUSER;
input  [1:0] m_axi_kernel_output_RRESP;
input   m_axi_kernel_output_BVALID;
output   m_axi_kernel_output_BREADY;
input  [1:0] m_axi_kernel_output_BRESP;
input  [0:0] m_axi_kernel_output_BID;
input  [0:0] m_axi_kernel_output_BUSER;
input  [57:0] sext_ln112;
output  [14:0] output_0_0_address0;
output   output_0_0_ce0;
output   output_0_0_we0;
output  [31:0] output_0_0_d0;
output  [14:0] output_0_0_address1;
output   output_0_0_ce1;
output   output_0_0_we1;
output  [31:0] output_0_0_d1;
output  [14:0] output_0_1_address0;
output   output_0_1_ce0;
output   output_0_1_we0;
output  [31:0] output_0_1_d0;
output  [14:0] output_0_1_address1;
output   output_0_1_ce1;
output   output_0_1_we1;
output  [31:0] output_0_1_d1;
output  [14:0] output_0_2_address0;
output   output_0_2_ce0;
output   output_0_2_we0;
output  [31:0] output_0_2_d0;
output  [14:0] output_0_2_address1;
output   output_0_2_ce1;
output   output_0_2_we1;
output  [31:0] output_0_2_d1;
output  [14:0] output_0_3_address0;
output   output_0_3_ce0;
output   output_0_3_we0;
output  [31:0] output_0_3_d0;
output  [14:0] output_0_3_address1;
output   output_0_3_ce1;
output   output_0_3_we1;
output  [31:0] output_0_3_d1;
output  [14:0] output_0_4_address0;
output   output_0_4_ce0;
output   output_0_4_we0;
output  [31:0] output_0_4_d0;
output  [14:0] output_0_4_address1;
output   output_0_4_ce1;
output   output_0_4_we1;
output  [31:0] output_0_4_d1;
output  [14:0] output_0_5_address0;
output   output_0_5_ce0;
output   output_0_5_we0;
output  [31:0] output_0_5_d0;
output  [14:0] output_0_5_address1;
output   output_0_5_ce1;
output   output_0_5_we1;
output  [31:0] output_0_5_d1;
output  [14:0] output_0_6_address0;
output   output_0_6_ce0;
output   output_0_6_we0;
output  [31:0] output_0_6_d0;
output  [14:0] output_0_6_address1;
output   output_0_6_ce1;
output   output_0_6_we1;
output  [31:0] output_0_6_d1;
output  [14:0] output_0_7_address0;
output   output_0_7_ce0;
output   output_0_7_we0;
output  [31:0] output_0_7_d0;
output  [14:0] output_0_7_address1;
output   output_0_7_ce1;
output   output_0_7_we1;
output  [31:0] output_0_7_d1;
output  [14:0] output_1_0_address0;
output   output_1_0_ce0;
output   output_1_0_we0;
output  [31:0] output_1_0_d0;
output  [14:0] output_1_0_address1;
output   output_1_0_ce1;
output   output_1_0_we1;
output  [31:0] output_1_0_d1;
output  [14:0] output_1_1_address0;
output   output_1_1_ce0;
output   output_1_1_we0;
output  [31:0] output_1_1_d0;
output  [14:0] output_1_1_address1;
output   output_1_1_ce1;
output   output_1_1_we1;
output  [31:0] output_1_1_d1;
output  [14:0] output_1_2_address0;
output   output_1_2_ce0;
output   output_1_2_we0;
output  [31:0] output_1_2_d0;
output  [14:0] output_1_2_address1;
output   output_1_2_ce1;
output   output_1_2_we1;
output  [31:0] output_1_2_d1;
output  [14:0] output_1_3_address0;
output   output_1_3_ce0;
output   output_1_3_we0;
output  [31:0] output_1_3_d0;
output  [14:0] output_1_3_address1;
output   output_1_3_ce1;
output   output_1_3_we1;
output  [31:0] output_1_3_d1;
output  [14:0] output_1_4_address0;
output   output_1_4_ce0;
output   output_1_4_we0;
output  [31:0] output_1_4_d0;
output  [14:0] output_1_4_address1;
output   output_1_4_ce1;
output   output_1_4_we1;
output  [31:0] output_1_4_d1;
output  [14:0] output_1_5_address0;
output   output_1_5_ce0;
output   output_1_5_we0;
output  [31:0] output_1_5_d0;
output  [14:0] output_1_5_address1;
output   output_1_5_ce1;
output   output_1_5_we1;
output  [31:0] output_1_5_d1;
output  [14:0] output_1_6_address0;
output   output_1_6_ce0;
output   output_1_6_we0;
output  [31:0] output_1_6_d0;
output  [14:0] output_1_6_address1;
output   output_1_6_ce1;
output   output_1_6_we1;
output  [31:0] output_1_6_d1;
output  [14:0] output_1_7_address0;
output   output_1_7_ce0;
output   output_1_7_we0;
output  [31:0] output_1_7_d0;
output  [14:0] output_1_7_address1;
output   output_1_7_ce1;
output   output_1_7_we1;
output  [31:0] output_1_7_d1;
output  [14:0] output_2_0_address0;
output   output_2_0_ce0;
output   output_2_0_we0;
output  [31:0] output_2_0_d0;
output  [14:0] output_2_0_address1;
output   output_2_0_ce1;
output   output_2_0_we1;
output  [31:0] output_2_0_d1;
output  [14:0] output_2_1_address0;
output   output_2_1_ce0;
output   output_2_1_we0;
output  [31:0] output_2_1_d0;
output  [14:0] output_2_1_address1;
output   output_2_1_ce1;
output   output_2_1_we1;
output  [31:0] output_2_1_d1;
output  [14:0] output_2_2_address0;
output   output_2_2_ce0;
output   output_2_2_we0;
output  [31:0] output_2_2_d0;
output  [14:0] output_2_2_address1;
output   output_2_2_ce1;
output   output_2_2_we1;
output  [31:0] output_2_2_d1;
output  [14:0] output_2_3_address0;
output   output_2_3_ce0;
output   output_2_3_we0;
output  [31:0] output_2_3_d0;
output  [14:0] output_2_3_address1;
output   output_2_3_ce1;
output   output_2_3_we1;
output  [31:0] output_2_3_d1;
output  [14:0] output_2_4_address0;
output   output_2_4_ce0;
output   output_2_4_we0;
output  [31:0] output_2_4_d0;
output  [14:0] output_2_4_address1;
output   output_2_4_ce1;
output   output_2_4_we1;
output  [31:0] output_2_4_d1;
output  [14:0] output_2_5_address0;
output   output_2_5_ce0;
output   output_2_5_we0;
output  [31:0] output_2_5_d0;
output  [14:0] output_2_5_address1;
output   output_2_5_ce1;
output   output_2_5_we1;
output  [31:0] output_2_5_d1;
output  [14:0] output_2_6_address0;
output   output_2_6_ce0;
output   output_2_6_we0;
output  [31:0] output_2_6_d0;
output  [14:0] output_2_6_address1;
output   output_2_6_ce1;
output   output_2_6_we1;
output  [31:0] output_2_6_d1;
output  [14:0] output_2_7_address0;
output   output_2_7_ce0;
output   output_2_7_we0;
output  [31:0] output_2_7_d0;
output  [14:0] output_2_7_address1;
output   output_2_7_ce1;
output   output_2_7_we1;
output  [31:0] output_2_7_d1;
output  [14:0] output_3_0_address0;
output   output_3_0_ce0;
output   output_3_0_we0;
output  [31:0] output_3_0_d0;
output  [14:0] output_3_0_address1;
output   output_3_0_ce1;
output   output_3_0_we1;
output  [31:0] output_3_0_d1;
output  [14:0] output_3_1_address0;
output   output_3_1_ce0;
output   output_3_1_we0;
output  [31:0] output_3_1_d0;
output  [14:0] output_3_1_address1;
output   output_3_1_ce1;
output   output_3_1_we1;
output  [31:0] output_3_1_d1;
output  [14:0] output_3_2_address0;
output   output_3_2_ce0;
output   output_3_2_we0;
output  [31:0] output_3_2_d0;
output  [14:0] output_3_2_address1;
output   output_3_2_ce1;
output   output_3_2_we1;
output  [31:0] output_3_2_d1;
output  [14:0] output_3_3_address0;
output   output_3_3_ce0;
output   output_3_3_we0;
output  [31:0] output_3_3_d0;
output  [14:0] output_3_3_address1;
output   output_3_3_ce1;
output   output_3_3_we1;
output  [31:0] output_3_3_d1;
output  [14:0] output_3_4_address0;
output   output_3_4_ce0;
output   output_3_4_we0;
output  [31:0] output_3_4_d0;
output  [14:0] output_3_4_address1;
output   output_3_4_ce1;
output   output_3_4_we1;
output  [31:0] output_3_4_d1;
output  [14:0] output_3_5_address0;
output   output_3_5_ce0;
output   output_3_5_we0;
output  [31:0] output_3_5_d0;
output  [14:0] output_3_5_address1;
output   output_3_5_ce1;
output   output_3_5_we1;
output  [31:0] output_3_5_d1;
output  [14:0] output_3_6_address0;
output   output_3_6_ce0;
output   output_3_6_we0;
output  [31:0] output_3_6_d0;
output  [14:0] output_3_6_address1;
output   output_3_6_ce1;
output   output_3_6_we1;
output  [31:0] output_3_6_d1;
output  [14:0] output_3_7_address0;
output   output_3_7_ce0;
output   output_3_7_we0;
output  [31:0] output_3_7_d0;
output  [14:0] output_3_7_address1;
output   output_3_7_ce1;
output   output_3_7_we1;
output  [31:0] output_3_7_d1;

reg ap_idle;
reg m_axi_kernel_output_RREADY;
reg output_0_0_ce0;
reg output_0_0_we0;
reg output_0_0_ce1;
reg output_0_0_we1;
reg output_0_1_ce0;
reg output_0_1_we0;
reg output_0_1_ce1;
reg output_0_1_we1;
reg output_0_2_ce0;
reg output_0_2_we0;
reg output_0_2_ce1;
reg output_0_2_we1;
reg output_0_3_ce0;
reg output_0_3_we0;
reg output_0_3_ce1;
reg output_0_3_we1;
reg output_0_4_ce0;
reg output_0_4_we0;
reg output_0_4_ce1;
reg output_0_4_we1;
reg output_0_5_ce0;
reg output_0_5_we0;
reg output_0_5_ce1;
reg output_0_5_we1;
reg output_0_6_ce0;
reg output_0_6_we0;
reg output_0_6_ce1;
reg output_0_6_we1;
reg output_0_7_ce0;
reg output_0_7_we0;
reg output_0_7_ce1;
reg output_0_7_we1;
reg output_1_0_ce0;
reg output_1_0_we0;
reg output_1_0_ce1;
reg output_1_0_we1;
reg output_1_1_ce0;
reg output_1_1_we0;
reg output_1_1_ce1;
reg output_1_1_we1;
reg output_1_2_ce0;
reg output_1_2_we0;
reg output_1_2_ce1;
reg output_1_2_we1;
reg output_1_3_ce0;
reg output_1_3_we0;
reg output_1_3_ce1;
reg output_1_3_we1;
reg output_1_4_ce0;
reg output_1_4_we0;
reg output_1_4_ce1;
reg output_1_4_we1;
reg output_1_5_ce0;
reg output_1_5_we0;
reg output_1_5_ce1;
reg output_1_5_we1;
reg output_1_6_ce0;
reg output_1_6_we0;
reg output_1_6_ce1;
reg output_1_6_we1;
reg output_1_7_ce0;
reg output_1_7_we0;
reg output_1_7_ce1;
reg output_1_7_we1;
reg output_2_0_ce0;
reg output_2_0_we0;
reg output_2_0_ce1;
reg output_2_0_we1;
reg output_2_1_ce0;
reg output_2_1_we0;
reg output_2_1_ce1;
reg output_2_1_we1;
reg output_2_2_ce0;
reg output_2_2_we0;
reg output_2_2_ce1;
reg output_2_2_we1;
reg output_2_3_ce0;
reg output_2_3_we0;
reg output_2_3_ce1;
reg output_2_3_we1;
reg output_2_4_ce0;
reg output_2_4_we0;
reg output_2_4_ce1;
reg output_2_4_we1;
reg output_2_5_ce0;
reg output_2_5_we0;
reg output_2_5_ce1;
reg output_2_5_we1;
reg output_2_6_ce0;
reg output_2_6_we0;
reg output_2_6_ce1;
reg output_2_6_we1;
reg output_2_7_ce0;
reg output_2_7_we0;
reg output_2_7_ce1;
reg output_2_7_we1;
reg output_3_0_ce0;
reg output_3_0_we0;
reg output_3_0_ce1;
reg output_3_0_we1;
reg output_3_1_ce0;
reg output_3_1_we0;
reg output_3_1_ce1;
reg output_3_1_we1;
reg output_3_2_ce0;
reg output_3_2_we0;
reg output_3_2_ce1;
reg output_3_2_we1;
reg output_3_3_ce0;
reg output_3_3_we0;
reg output_3_3_ce1;
reg output_3_3_we1;
reg output_3_4_ce0;
reg output_3_4_we0;
reg output_3_4_ce1;
reg output_3_4_we1;
reg output_3_5_ce0;
reg output_3_5_we0;
reg output_3_5_ce1;
reg output_3_5_we1;
reg output_3_6_ce0;
reg output_3_6_we0;
reg output_3_6_ce1;
reg output_3_6_we1;
reg output_3_7_ce0;
reg output_3_7_we0;
reg output_3_7_ce1;
reg output_3_7_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln112_reg_1714;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_1097_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_output_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln113_fu_1118_p2;
reg   [0:0] icmp_ln113_reg_1718;
wire   [4:0] select_ln112_1_fu_1124_p3;
reg   [4:0] select_ln112_1_reg_1725;
wire   [0:0] or_ln113_fu_1203_p2;
reg   [0:0] or_ln113_reg_1731;
wire   [1:0] trunc_ln113_fu_1248_p1;
reg   [1:0] trunc_ln113_reg_1736;
wire   [14:0] sub_ln133_1_fu_1292_p2;
reg   [14:0] sub_ln133_1_reg_1740;
wire   [31:0] bitcast_ln126_fu_1452_p1;
reg   [31:0] bitcast_ln126_reg_1746;
wire   [31:0] bitcast_ln126_1_fu_1456_p1;
reg   [31:0] bitcast_ln126_1_reg_1754;
wire   [31:0] bitcast_ln126_2_fu_1460_p1;
reg   [31:0] bitcast_ln126_2_reg_1762;
wire   [31:0] bitcast_ln126_3_fu_1464_p1;
reg   [31:0] bitcast_ln126_3_reg_1770;
wire   [31:0] bitcast_ln126_4_fu_1468_p1;
reg   [31:0] bitcast_ln126_4_reg_1778;
wire   [31:0] bitcast_ln126_5_fu_1472_p1;
reg   [31:0] bitcast_ln126_5_reg_1786;
wire   [31:0] bitcast_ln126_6_fu_1476_p1;
reg   [31:0] bitcast_ln126_6_reg_1794;
wire   [31:0] bitcast_ln126_7_fu_1480_p1;
reg   [31:0] bitcast_ln126_7_reg_1802;
wire   [31:0] bitcast_ln126_8_fu_1484_p1;
reg   [31:0] bitcast_ln126_8_reg_1810;
wire   [31:0] bitcast_ln126_9_fu_1488_p1;
reg   [31:0] bitcast_ln126_9_reg_1818;
wire   [31:0] bitcast_ln126_10_fu_1492_p1;
reg   [31:0] bitcast_ln126_10_reg_1826;
wire   [31:0] bitcast_ln126_11_fu_1496_p1;
reg   [31:0] bitcast_ln126_11_reg_1834;
wire   [31:0] bitcast_ln126_12_fu_1500_p1;
reg   [31:0] bitcast_ln126_12_reg_1842;
wire   [31:0] bitcast_ln126_13_fu_1504_p1;
reg   [31:0] bitcast_ln126_13_reg_1850;
wire   [31:0] bitcast_ln126_14_fu_1508_p1;
reg   [31:0] bitcast_ln126_14_reg_1858;
wire   [31:0] bitcast_ln126_15_fu_1512_p1;
reg   [31:0] bitcast_ln126_15_reg_1866;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln133_4_fu_1569_p1;
wire   [63:0] zext_ln141_1_fu_1620_p1;
reg   [7:0] i2_fu_222;
wire   [7:0] add_ln114_fu_1656_p2;
wire    ap_loop_init;
reg   [3:0] indvar_fu_226;
wire   [3:0] select_ln114_fu_1522_p3;
reg   [7:0] i1_fu_230;
wire   [7:0] select_ln113_1_fu_1208_p3;
reg   [11:0] indvar_flatten_fu_234;
wire   [11:0] select_ln113_2_fu_1138_p3;
reg   [4:0] i0_fu_238;
reg   [15:0] indvar_flatten13_fu_242;
wire   [15:0] add_ln112_fu_1103_p2;
wire   [4:0] add_ln112_1_fu_1112_p2;
wire   [11:0] add_ln113_1_fu_1132_p2;
wire   [0:0] icmp_ln114_fu_1185_p2;
wire   [0:0] xor_ln112_fu_1180_p2;
wire   [7:0] select_ln112_fu_1173_p3;
wire   [0:0] and_ln112_fu_1191_p2;
wire   [7:0] add_ln113_fu_1197_p2;
wire   [10:0] tmp_fu_1216_p3;
wire   [7:0] tmp_s_fu_1227_p3;
wire   [11:0] zext_ln133_fu_1223_p1;
wire   [11:0] zext_ln133_1_fu_1234_p1;
wire   [11:0] sub_ln133_fu_1238_p2;
wire   [5:0] lshr_ln_fu_1252_p4;
wire  signed [12:0] sext_ln113_fu_1244_p1;
wire   [12:0] zext_ln133_2_fu_1262_p1;
wire   [12:0] add_ln133_fu_1266_p2;
wire   [9:0] trunc_ln133_fu_1272_p1;
wire   [14:0] tmp_19_fu_1276_p3;
wire   [14:0] tmp_20_fu_1284_p3;
wire   [31:0] trunc_ln126_fu_1298_p1;
wire   [31:0] trunc_ln126_1_fu_1302_p4;
wire   [31:0] trunc_ln126_2_fu_1312_p4;
wire   [31:0] trunc_ln126_3_fu_1322_p4;
wire   [31:0] trunc_ln126_4_fu_1332_p4;
wire   [31:0] trunc_ln126_5_fu_1342_p4;
wire   [31:0] trunc_ln126_6_fu_1352_p4;
wire   [31:0] trunc_ln126_7_fu_1362_p4;
wire   [31:0] trunc_ln126_8_fu_1372_p4;
wire   [31:0] trunc_ln126_9_fu_1382_p4;
wire   [31:0] trunc_ln126_s_fu_1392_p4;
wire   [31:0] trunc_ln126_10_fu_1402_p4;
wire   [31:0] trunc_ln126_11_fu_1412_p4;
wire   [31:0] trunc_ln126_12_fu_1422_p4;
wire   [31:0] trunc_ln126_13_fu_1432_p4;
wire   [31:0] trunc_ln126_14_fu_1442_p4;
wire   [3:0] add_ln114_1_fu_1516_p2;
wire   [7:0] select_ln113_fu_1543_p3;
wire   [4:0] lshr_ln2_fu_1550_p4;
wire   [14:0] zext_ln133_3_fu_1560_p1;
wire   [14:0] add_ln133_1_fu_1564_p2;
wire   [4:0] or_ln141_fu_1605_p2;
wire   [14:0] zext_ln141_fu_1611_p1;
wire   [14:0] add_ln141_fu_1615_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i2_fu_222 = 8'd0;
#0 indvar_fu_226 = 4'd0;
#0 i1_fu_230 = 8'd0;
#0 indvar_flatten_fu_234 = 12'd0;
#0 i0_fu_238 = 5'd0;
#0 indvar_flatten13_fu_242 = 16'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i0_fu_238 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_fu_1097_p2 == 1'd0))) begin
            i0_fu_238 <= select_ln112_1_fu_1124_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i1_fu_230 <= 8'd0;
        end else if (((icmp_ln112_reg_1714 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            i1_fu_230 <= select_ln113_1_fu_1208_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i2_fu_222 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            i2_fu_222 <= add_ln114_fu_1656_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_242 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_fu_1097_p2 == 1'd0))) begin
            indvar_flatten13_fu_242 <= add_ln112_fu_1103_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_234 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_fu_1097_p2 == 1'd0))) begin
            indvar_flatten_fu_234 <= select_ln113_2_fu_1138_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_fu_226 <= 4'd0;
        end else if (((icmp_ln112_reg_1714 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            indvar_fu_226 <= select_ln114_fu_1522_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln112_reg_1714 <= icmp_ln112_fu_1097_p2;
        icmp_ln113_reg_1718 <= icmp_ln113_fu_1118_p2;
        select_ln112_1_reg_1725 <= select_ln112_1_fu_1124_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bitcast_ln126_10_reg_1826 <= bitcast_ln126_10_fu_1492_p1;
        bitcast_ln126_11_reg_1834 <= bitcast_ln126_11_fu_1496_p1;
        bitcast_ln126_12_reg_1842 <= bitcast_ln126_12_fu_1500_p1;
        bitcast_ln126_13_reg_1850 <= bitcast_ln126_13_fu_1504_p1;
        bitcast_ln126_14_reg_1858 <= bitcast_ln126_14_fu_1508_p1;
        bitcast_ln126_15_reg_1866 <= bitcast_ln126_15_fu_1512_p1;
        bitcast_ln126_1_reg_1754 <= bitcast_ln126_1_fu_1456_p1;
        bitcast_ln126_2_reg_1762 <= bitcast_ln126_2_fu_1460_p1;
        bitcast_ln126_3_reg_1770 <= bitcast_ln126_3_fu_1464_p1;
        bitcast_ln126_4_reg_1778 <= bitcast_ln126_4_fu_1468_p1;
        bitcast_ln126_5_reg_1786 <= bitcast_ln126_5_fu_1472_p1;
        bitcast_ln126_6_reg_1794 <= bitcast_ln126_6_fu_1476_p1;
        bitcast_ln126_7_reg_1802 <= bitcast_ln126_7_fu_1480_p1;
        bitcast_ln126_8_reg_1810 <= bitcast_ln126_8_fu_1484_p1;
        bitcast_ln126_9_reg_1818 <= bitcast_ln126_9_fu_1488_p1;
        bitcast_ln126_reg_1746 <= bitcast_ln126_fu_1452_p1;
        or_ln113_reg_1731 <= or_ln113_fu_1203_p2;
        sub_ln133_1_reg_1740[14 : 2] <= sub_ln133_1_fu_1292_p2[14 : 2];
        trunc_ln113_reg_1736 <= trunc_ln113_fu_1248_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_1097_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1714 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1714 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kernel_output_blk_n_R = m_axi_kernel_output_RVALID;
    end else begin
        kernel_output_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1714 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_kernel_output_RREADY = 1'b1;
    end else begin
        m_axi_kernel_output_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_0_ce0 = 1'b1;
    end else begin
        output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_0_ce1 = 1'b1;
    end else begin
        output_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_0_we0 = 1'b1;
    end else begin
        output_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_0_we1 = 1'b1;
    end else begin
        output_0_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_1_ce0 = 1'b1;
    end else begin
        output_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_1_ce1 = 1'b1;
    end else begin
        output_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_1_we0 = 1'b1;
    end else begin
        output_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_1_we1 = 1'b1;
    end else begin
        output_0_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_2_ce0 = 1'b1;
    end else begin
        output_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_2_ce1 = 1'b1;
    end else begin
        output_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_2_we0 = 1'b1;
    end else begin
        output_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_2_we1 = 1'b1;
    end else begin
        output_0_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_3_ce0 = 1'b1;
    end else begin
        output_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_3_ce1 = 1'b1;
    end else begin
        output_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_3_we0 = 1'b1;
    end else begin
        output_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_3_we1 = 1'b1;
    end else begin
        output_0_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_4_ce0 = 1'b1;
    end else begin
        output_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_4_ce1 = 1'b1;
    end else begin
        output_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_4_we0 = 1'b1;
    end else begin
        output_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_4_we1 = 1'b1;
    end else begin
        output_0_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_5_ce0 = 1'b1;
    end else begin
        output_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_5_ce1 = 1'b1;
    end else begin
        output_0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_5_we0 = 1'b1;
    end else begin
        output_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_5_we1 = 1'b1;
    end else begin
        output_0_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_6_ce0 = 1'b1;
    end else begin
        output_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_6_ce1 = 1'b1;
    end else begin
        output_0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_6_we0 = 1'b1;
    end else begin
        output_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_6_we1 = 1'b1;
    end else begin
        output_0_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_7_ce0 = 1'b1;
    end else begin
        output_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_7_ce1 = 1'b1;
    end else begin
        output_0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_7_we0 = 1'b1;
    end else begin
        output_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_7_we1 = 1'b1;
    end else begin
        output_0_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_0_ce0 = 1'b1;
    end else begin
        output_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_0_ce1 = 1'b1;
    end else begin
        output_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_0_we0 = 1'b1;
    end else begin
        output_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_0_we1 = 1'b1;
    end else begin
        output_1_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_1_ce0 = 1'b1;
    end else begin
        output_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_1_ce1 = 1'b1;
    end else begin
        output_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_1_we0 = 1'b1;
    end else begin
        output_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_1_we1 = 1'b1;
    end else begin
        output_1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_2_ce0 = 1'b1;
    end else begin
        output_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_2_ce1 = 1'b1;
    end else begin
        output_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_2_we0 = 1'b1;
    end else begin
        output_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_2_we1 = 1'b1;
    end else begin
        output_1_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_3_ce0 = 1'b1;
    end else begin
        output_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_3_ce1 = 1'b1;
    end else begin
        output_1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_3_we0 = 1'b1;
    end else begin
        output_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_3_we1 = 1'b1;
    end else begin
        output_1_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_4_ce0 = 1'b1;
    end else begin
        output_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_4_ce1 = 1'b1;
    end else begin
        output_1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_4_we0 = 1'b1;
    end else begin
        output_1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_4_we1 = 1'b1;
    end else begin
        output_1_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_5_ce0 = 1'b1;
    end else begin
        output_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_5_ce1 = 1'b1;
    end else begin
        output_1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_5_we0 = 1'b1;
    end else begin
        output_1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_5_we1 = 1'b1;
    end else begin
        output_1_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_6_ce0 = 1'b1;
    end else begin
        output_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_6_ce1 = 1'b1;
    end else begin
        output_1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_6_we0 = 1'b1;
    end else begin
        output_1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_6_we1 = 1'b1;
    end else begin
        output_1_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_7_ce0 = 1'b1;
    end else begin
        output_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_7_ce1 = 1'b1;
    end else begin
        output_1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_7_we0 = 1'b1;
    end else begin
        output_1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_7_we1 = 1'b1;
    end else begin
        output_1_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_0_ce0 = 1'b1;
    end else begin
        output_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_0_ce1 = 1'b1;
    end else begin
        output_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_0_we0 = 1'b1;
    end else begin
        output_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_0_we1 = 1'b1;
    end else begin
        output_2_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_1_ce0 = 1'b1;
    end else begin
        output_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_1_ce1 = 1'b1;
    end else begin
        output_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_1_we0 = 1'b1;
    end else begin
        output_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_1_we1 = 1'b1;
    end else begin
        output_2_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_2_ce0 = 1'b1;
    end else begin
        output_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_2_ce1 = 1'b1;
    end else begin
        output_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_2_we0 = 1'b1;
    end else begin
        output_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_2_we1 = 1'b1;
    end else begin
        output_2_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_3_ce0 = 1'b1;
    end else begin
        output_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_3_ce1 = 1'b1;
    end else begin
        output_2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_3_we0 = 1'b1;
    end else begin
        output_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_3_we1 = 1'b1;
    end else begin
        output_2_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_4_ce0 = 1'b1;
    end else begin
        output_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_4_ce1 = 1'b1;
    end else begin
        output_2_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_4_we0 = 1'b1;
    end else begin
        output_2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_4_we1 = 1'b1;
    end else begin
        output_2_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_5_ce0 = 1'b1;
    end else begin
        output_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_5_ce1 = 1'b1;
    end else begin
        output_2_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_5_we0 = 1'b1;
    end else begin
        output_2_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_5_we1 = 1'b1;
    end else begin
        output_2_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_6_ce0 = 1'b1;
    end else begin
        output_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_6_ce1 = 1'b1;
    end else begin
        output_2_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_6_we0 = 1'b1;
    end else begin
        output_2_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_6_we1 = 1'b1;
    end else begin
        output_2_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_7_ce0 = 1'b1;
    end else begin
        output_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_7_ce1 = 1'b1;
    end else begin
        output_2_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_7_we0 = 1'b1;
    end else begin
        output_2_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_7_we1 = 1'b1;
    end else begin
        output_2_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_0_ce0 = 1'b1;
    end else begin
        output_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_0_ce1 = 1'b1;
    end else begin
        output_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_0_we0 = 1'b1;
    end else begin
        output_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_0_we1 = 1'b1;
    end else begin
        output_3_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_1_ce0 = 1'b1;
    end else begin
        output_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_1_ce1 = 1'b1;
    end else begin
        output_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_1_we0 = 1'b1;
    end else begin
        output_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_1_we1 = 1'b1;
    end else begin
        output_3_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_2_ce0 = 1'b1;
    end else begin
        output_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_2_ce1 = 1'b1;
    end else begin
        output_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_2_we0 = 1'b1;
    end else begin
        output_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_2_we1 = 1'b1;
    end else begin
        output_3_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_3_ce0 = 1'b1;
    end else begin
        output_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_3_ce1 = 1'b1;
    end else begin
        output_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_3_we0 = 1'b1;
    end else begin
        output_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_3_we1 = 1'b1;
    end else begin
        output_3_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_4_ce0 = 1'b1;
    end else begin
        output_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_4_ce1 = 1'b1;
    end else begin
        output_3_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_4_we0 = 1'b1;
    end else begin
        output_3_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_4_we1 = 1'b1;
    end else begin
        output_3_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_5_ce0 = 1'b1;
    end else begin
        output_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_5_ce1 = 1'b1;
    end else begin
        output_3_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_5_we0 = 1'b1;
    end else begin
        output_3_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_5_we1 = 1'b1;
    end else begin
        output_3_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_6_ce0 = 1'b1;
    end else begin
        output_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_6_ce1 = 1'b1;
    end else begin
        output_3_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_6_we0 = 1'b1;
    end else begin
        output_3_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_6_we1 = 1'b1;
    end else begin
        output_3_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_7_ce0 = 1'b1;
    end else begin
        output_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_7_ce1 = 1'b1;
    end else begin
        output_3_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_7_we0 = 1'b1;
    end else begin
        output_3_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln113_reg_1736 == 2'd3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_7_we1 = 1'b1;
    end else begin
        output_3_7_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_1112_p2 = (i0_fu_238 + 5'd1);

assign add_ln112_fu_1103_p2 = (indvar_flatten13_fu_242 + 16'd1);

assign add_ln113_1_fu_1132_p2 = (indvar_flatten_fu_234 + 12'd1);

assign add_ln113_fu_1197_p2 = (select_ln112_fu_1173_p3 + 8'd1);

assign add_ln114_1_fu_1516_p2 = (indvar_fu_226 + 4'd1);

assign add_ln114_fu_1656_p2 = (select_ln113_fu_1543_p3 + 8'd16);

assign add_ln133_1_fu_1564_p2 = (sub_ln133_1_reg_1740 + zext_ln133_3_fu_1560_p1);

assign add_ln133_fu_1266_p2 = ($signed(sext_ln113_fu_1244_p1) + $signed(zext_ln133_2_fu_1262_p1));

assign add_ln141_fu_1615_p2 = (sub_ln133_1_reg_1740 + zext_ln141_fu_1611_p1);

assign and_ln112_fu_1191_p2 = (xor_ln112_fu_1180_p2 & icmp_ln114_fu_1185_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln112_reg_1714 == 1'd0) & (m_axi_kernel_output_RVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln126_10_fu_1492_p1 = trunc_ln126_s_fu_1392_p4;

assign bitcast_ln126_11_fu_1496_p1 = trunc_ln126_10_fu_1402_p4;

assign bitcast_ln126_12_fu_1500_p1 = trunc_ln126_11_fu_1412_p4;

assign bitcast_ln126_13_fu_1504_p1 = trunc_ln126_12_fu_1422_p4;

assign bitcast_ln126_14_fu_1508_p1 = trunc_ln126_13_fu_1432_p4;

assign bitcast_ln126_15_fu_1512_p1 = trunc_ln126_14_fu_1442_p4;

assign bitcast_ln126_1_fu_1456_p1 = trunc_ln126_1_fu_1302_p4;

assign bitcast_ln126_2_fu_1460_p1 = trunc_ln126_2_fu_1312_p4;

assign bitcast_ln126_3_fu_1464_p1 = trunc_ln126_3_fu_1322_p4;

assign bitcast_ln126_4_fu_1468_p1 = trunc_ln126_4_fu_1332_p4;

assign bitcast_ln126_5_fu_1472_p1 = trunc_ln126_5_fu_1342_p4;

assign bitcast_ln126_6_fu_1476_p1 = trunc_ln126_6_fu_1352_p4;

assign bitcast_ln126_7_fu_1480_p1 = trunc_ln126_7_fu_1362_p4;

assign bitcast_ln126_8_fu_1484_p1 = trunc_ln126_8_fu_1372_p4;

assign bitcast_ln126_9_fu_1488_p1 = trunc_ln126_9_fu_1382_p4;

assign bitcast_ln126_fu_1452_p1 = trunc_ln126_fu_1298_p1;

assign icmp_ln112_fu_1097_p2 = ((indvar_flatten13_fu_242 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_1118_p2 = ((indvar_flatten_fu_234 == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_1185_p2 = ((indvar_fu_226 == 4'd14) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_1550_p4 = {{select_ln113_fu_1543_p3[7:3]}};

assign lshr_ln_fu_1252_p4 = {{select_ln113_1_fu_1208_p3[7:2]}};

assign m_axi_kernel_output_ARADDR = 64'd0;

assign m_axi_kernel_output_ARBURST = 2'd0;

assign m_axi_kernel_output_ARCACHE = 4'd0;

assign m_axi_kernel_output_ARID = 1'd0;

assign m_axi_kernel_output_ARLEN = 32'd0;

assign m_axi_kernel_output_ARLOCK = 2'd0;

assign m_axi_kernel_output_ARPROT = 3'd0;

assign m_axi_kernel_output_ARQOS = 4'd0;

assign m_axi_kernel_output_ARREGION = 4'd0;

assign m_axi_kernel_output_ARSIZE = 3'd0;

assign m_axi_kernel_output_ARUSER = 1'd0;

assign m_axi_kernel_output_ARVALID = 1'b0;

assign m_axi_kernel_output_AWADDR = 64'd0;

assign m_axi_kernel_output_AWBURST = 2'd0;

assign m_axi_kernel_output_AWCACHE = 4'd0;

assign m_axi_kernel_output_AWID = 1'd0;

assign m_axi_kernel_output_AWLEN = 32'd0;

assign m_axi_kernel_output_AWLOCK = 2'd0;

assign m_axi_kernel_output_AWPROT = 3'd0;

assign m_axi_kernel_output_AWQOS = 4'd0;

assign m_axi_kernel_output_AWREGION = 4'd0;

assign m_axi_kernel_output_AWSIZE = 3'd0;

assign m_axi_kernel_output_AWUSER = 1'd0;

assign m_axi_kernel_output_AWVALID = 1'b0;

assign m_axi_kernel_output_BREADY = 1'b0;

assign m_axi_kernel_output_WDATA = 512'd0;

assign m_axi_kernel_output_WID = 1'd0;

assign m_axi_kernel_output_WLAST = 1'b0;

assign m_axi_kernel_output_WSTRB = 64'd0;

assign m_axi_kernel_output_WUSER = 1'd0;

assign m_axi_kernel_output_WVALID = 1'b0;

assign or_ln113_fu_1203_p2 = (icmp_ln113_reg_1718 | and_ln112_fu_1191_p2);

assign or_ln141_fu_1605_p2 = (lshr_ln2_fu_1550_p4 | 5'd1);

assign output_0_0_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_0_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_0_d0 = bitcast_ln126_8_reg_1810;

assign output_0_0_d1 = bitcast_ln126_reg_1746;

assign output_0_1_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_1_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_1_d0 = bitcast_ln126_9_reg_1818;

assign output_0_1_d1 = bitcast_ln126_1_reg_1754;

assign output_0_2_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_2_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_2_d0 = bitcast_ln126_10_reg_1826;

assign output_0_2_d1 = bitcast_ln126_2_reg_1762;

assign output_0_3_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_3_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_3_d0 = bitcast_ln126_11_reg_1834;

assign output_0_3_d1 = bitcast_ln126_3_reg_1770;

assign output_0_4_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_4_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_4_d0 = bitcast_ln126_12_reg_1842;

assign output_0_4_d1 = bitcast_ln126_4_reg_1778;

assign output_0_5_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_5_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_5_d0 = bitcast_ln126_13_reg_1850;

assign output_0_5_d1 = bitcast_ln126_5_reg_1786;

assign output_0_6_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_6_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_6_d0 = bitcast_ln126_14_reg_1858;

assign output_0_6_d1 = bitcast_ln126_6_reg_1794;

assign output_0_7_address0 = zext_ln141_1_fu_1620_p1;

assign output_0_7_address1 = zext_ln133_4_fu_1569_p1;

assign output_0_7_d0 = bitcast_ln126_15_reg_1866;

assign output_0_7_d1 = bitcast_ln126_7_reg_1802;

assign output_1_0_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_0_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_0_d0 = bitcast_ln126_8_reg_1810;

assign output_1_0_d1 = bitcast_ln126_reg_1746;

assign output_1_1_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_1_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_1_d0 = bitcast_ln126_9_reg_1818;

assign output_1_1_d1 = bitcast_ln126_1_reg_1754;

assign output_1_2_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_2_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_2_d0 = bitcast_ln126_10_reg_1826;

assign output_1_2_d1 = bitcast_ln126_2_reg_1762;

assign output_1_3_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_3_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_3_d0 = bitcast_ln126_11_reg_1834;

assign output_1_3_d1 = bitcast_ln126_3_reg_1770;

assign output_1_4_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_4_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_4_d0 = bitcast_ln126_12_reg_1842;

assign output_1_4_d1 = bitcast_ln126_4_reg_1778;

assign output_1_5_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_5_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_5_d0 = bitcast_ln126_13_reg_1850;

assign output_1_5_d1 = bitcast_ln126_5_reg_1786;

assign output_1_6_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_6_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_6_d0 = bitcast_ln126_14_reg_1858;

assign output_1_6_d1 = bitcast_ln126_6_reg_1794;

assign output_1_7_address0 = zext_ln141_1_fu_1620_p1;

assign output_1_7_address1 = zext_ln133_4_fu_1569_p1;

assign output_1_7_d0 = bitcast_ln126_15_reg_1866;

assign output_1_7_d1 = bitcast_ln126_7_reg_1802;

assign output_2_0_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_0_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_0_d0 = bitcast_ln126_8_reg_1810;

assign output_2_0_d1 = bitcast_ln126_reg_1746;

assign output_2_1_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_1_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_1_d0 = bitcast_ln126_9_reg_1818;

assign output_2_1_d1 = bitcast_ln126_1_reg_1754;

assign output_2_2_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_2_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_2_d0 = bitcast_ln126_10_reg_1826;

assign output_2_2_d1 = bitcast_ln126_2_reg_1762;

assign output_2_3_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_3_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_3_d0 = bitcast_ln126_11_reg_1834;

assign output_2_3_d1 = bitcast_ln126_3_reg_1770;

assign output_2_4_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_4_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_4_d0 = bitcast_ln126_12_reg_1842;

assign output_2_4_d1 = bitcast_ln126_4_reg_1778;

assign output_2_5_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_5_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_5_d0 = bitcast_ln126_13_reg_1850;

assign output_2_5_d1 = bitcast_ln126_5_reg_1786;

assign output_2_6_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_6_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_6_d0 = bitcast_ln126_14_reg_1858;

assign output_2_6_d1 = bitcast_ln126_6_reg_1794;

assign output_2_7_address0 = zext_ln141_1_fu_1620_p1;

assign output_2_7_address1 = zext_ln133_4_fu_1569_p1;

assign output_2_7_d0 = bitcast_ln126_15_reg_1866;

assign output_2_7_d1 = bitcast_ln126_7_reg_1802;

assign output_3_0_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_0_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_0_d0 = bitcast_ln126_8_reg_1810;

assign output_3_0_d1 = bitcast_ln126_reg_1746;

assign output_3_1_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_1_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_1_d0 = bitcast_ln126_9_reg_1818;

assign output_3_1_d1 = bitcast_ln126_1_reg_1754;

assign output_3_2_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_2_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_2_d0 = bitcast_ln126_10_reg_1826;

assign output_3_2_d1 = bitcast_ln126_2_reg_1762;

assign output_3_3_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_3_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_3_d0 = bitcast_ln126_11_reg_1834;

assign output_3_3_d1 = bitcast_ln126_3_reg_1770;

assign output_3_4_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_4_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_4_d0 = bitcast_ln126_12_reg_1842;

assign output_3_4_d1 = bitcast_ln126_4_reg_1778;

assign output_3_5_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_5_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_5_d0 = bitcast_ln126_13_reg_1850;

assign output_3_5_d1 = bitcast_ln126_5_reg_1786;

assign output_3_6_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_6_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_6_d0 = bitcast_ln126_14_reg_1858;

assign output_3_6_d1 = bitcast_ln126_6_reg_1794;

assign output_3_7_address0 = zext_ln141_1_fu_1620_p1;

assign output_3_7_address1 = zext_ln133_4_fu_1569_p1;

assign output_3_7_d0 = bitcast_ln126_15_reg_1866;

assign output_3_7_d1 = bitcast_ln126_7_reg_1802;

assign select_ln112_1_fu_1124_p3 = ((icmp_ln113_fu_1118_p2[0:0] == 1'b1) ? add_ln112_1_fu_1112_p2 : i0_fu_238);

assign select_ln112_fu_1173_p3 = ((icmp_ln113_reg_1718[0:0] == 1'b1) ? 8'd0 : i1_fu_230);

assign select_ln113_1_fu_1208_p3 = ((and_ln112_fu_1191_p2[0:0] == 1'b1) ? add_ln113_fu_1197_p2 : select_ln112_fu_1173_p3);

assign select_ln113_2_fu_1138_p3 = ((icmp_ln113_fu_1118_p2[0:0] == 1'b1) ? 12'd1 : add_ln113_1_fu_1132_p2);

assign select_ln113_fu_1543_p3 = ((or_ln113_reg_1731[0:0] == 1'b1) ? 8'd0 : i2_fu_222);

assign select_ln114_fu_1522_p3 = ((or_ln113_fu_1203_p2[0:0] == 1'b1) ? 4'd1 : add_ln114_1_fu_1516_p2);

assign sext_ln113_fu_1244_p1 = $signed(sub_ln133_fu_1238_p2);

assign sub_ln133_1_fu_1292_p2 = (tmp_19_fu_1276_p3 - tmp_20_fu_1284_p3);

assign sub_ln133_fu_1238_p2 = (zext_ln133_fu_1223_p1 - zext_ln133_1_fu_1234_p1);

assign tmp_19_fu_1276_p3 = {{trunc_ln133_fu_1272_p1}, {5'd0}};

assign tmp_20_fu_1284_p3 = {{add_ln133_fu_1266_p2}, {2'd0}};

assign tmp_fu_1216_p3 = {{select_ln112_1_reg_1725}, {6'd0}};

assign tmp_s_fu_1227_p3 = {{select_ln112_1_reg_1725}, {3'd0}};

assign trunc_ln113_fu_1248_p1 = select_ln113_1_fu_1208_p3[1:0];

assign trunc_ln126_10_fu_1402_p4 = {{m_axi_kernel_output_RDATA[383:352]}};

assign trunc_ln126_11_fu_1412_p4 = {{m_axi_kernel_output_RDATA[415:384]}};

assign trunc_ln126_12_fu_1422_p4 = {{m_axi_kernel_output_RDATA[447:416]}};

assign trunc_ln126_13_fu_1432_p4 = {{m_axi_kernel_output_RDATA[479:448]}};

assign trunc_ln126_14_fu_1442_p4 = {{m_axi_kernel_output_RDATA[511:480]}};

assign trunc_ln126_1_fu_1302_p4 = {{m_axi_kernel_output_RDATA[63:32]}};

assign trunc_ln126_2_fu_1312_p4 = {{m_axi_kernel_output_RDATA[95:64]}};

assign trunc_ln126_3_fu_1322_p4 = {{m_axi_kernel_output_RDATA[127:96]}};

assign trunc_ln126_4_fu_1332_p4 = {{m_axi_kernel_output_RDATA[159:128]}};

assign trunc_ln126_5_fu_1342_p4 = {{m_axi_kernel_output_RDATA[191:160]}};

assign trunc_ln126_6_fu_1352_p4 = {{m_axi_kernel_output_RDATA[223:192]}};

assign trunc_ln126_7_fu_1362_p4 = {{m_axi_kernel_output_RDATA[255:224]}};

assign trunc_ln126_8_fu_1372_p4 = {{m_axi_kernel_output_RDATA[287:256]}};

assign trunc_ln126_9_fu_1382_p4 = {{m_axi_kernel_output_RDATA[319:288]}};

assign trunc_ln126_fu_1298_p1 = m_axi_kernel_output_RDATA[31:0];

assign trunc_ln126_s_fu_1392_p4 = {{m_axi_kernel_output_RDATA[351:320]}};

assign trunc_ln133_fu_1272_p1 = add_ln133_fu_1266_p2[9:0];

assign xor_ln112_fu_1180_p2 = (icmp_ln113_reg_1718 ^ 1'd1);

assign zext_ln133_1_fu_1234_p1 = tmp_s_fu_1227_p3;

assign zext_ln133_2_fu_1262_p1 = lshr_ln_fu_1252_p4;

assign zext_ln133_3_fu_1560_p1 = lshr_ln2_fu_1550_p4;

assign zext_ln133_4_fu_1569_p1 = add_ln133_1_fu_1564_p2;

assign zext_ln133_fu_1223_p1 = tmp_fu_1216_p3;

assign zext_ln141_1_fu_1620_p1 = add_ln141_fu_1615_p2;

assign zext_ln141_fu_1611_p1 = or_ln141_fu_1605_p2;

always @ (posedge ap_clk) begin
    sub_ln133_1_reg_1740[1:0] <= 2'b00;
end

endmodule //kernel_cnn_load_output_S0_Pipeline_VITIS_LOOP_112_1_VITIS_LOOP_113_2_VITIS_LOOP_114_3
