// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_output_AWVALID,
        m_axi_kernel_output_AWREADY,
        m_axi_kernel_output_AWADDR,
        m_axi_kernel_output_AWID,
        m_axi_kernel_output_AWLEN,
        m_axi_kernel_output_AWSIZE,
        m_axi_kernel_output_AWBURST,
        m_axi_kernel_output_AWLOCK,
        m_axi_kernel_output_AWCACHE,
        m_axi_kernel_output_AWPROT,
        m_axi_kernel_output_AWQOS,
        m_axi_kernel_output_AWREGION,
        m_axi_kernel_output_AWUSER,
        m_axi_kernel_output_WVALID,
        m_axi_kernel_output_WREADY,
        m_axi_kernel_output_WDATA,
        m_axi_kernel_output_WSTRB,
        m_axi_kernel_output_WLAST,
        m_axi_kernel_output_WID,
        m_axi_kernel_output_WUSER,
        m_axi_kernel_output_ARVALID,
        m_axi_kernel_output_ARREADY,
        m_axi_kernel_output_ARADDR,
        m_axi_kernel_output_ARID,
        m_axi_kernel_output_ARLEN,
        m_axi_kernel_output_ARSIZE,
        m_axi_kernel_output_ARBURST,
        m_axi_kernel_output_ARLOCK,
        m_axi_kernel_output_ARCACHE,
        m_axi_kernel_output_ARPROT,
        m_axi_kernel_output_ARQOS,
        m_axi_kernel_output_ARREGION,
        m_axi_kernel_output_ARUSER,
        m_axi_kernel_output_RVALID,
        m_axi_kernel_output_RREADY,
        m_axi_kernel_output_RDATA,
        m_axi_kernel_output_RLAST,
        m_axi_kernel_output_RID,
        m_axi_kernel_output_RFIFONUM,
        m_axi_kernel_output_RUSER,
        m_axi_kernel_output_RRESP,
        m_axi_kernel_output_BVALID,
        m_axi_kernel_output_BREADY,
        m_axi_kernel_output_BRESP,
        m_axi_kernel_output_BID,
        m_axi_kernel_output_BUSER,
        sext_ln235,
        output_0_0_address0,
        output_0_0_ce0,
        output_0_0_q0,
        output_0_0_address1,
        output_0_0_ce1,
        output_0_0_q1,
        output_0_1_address0,
        output_0_1_ce0,
        output_0_1_q0,
        output_0_1_address1,
        output_0_1_ce1,
        output_0_1_q1,
        output_0_2_address0,
        output_0_2_ce0,
        output_0_2_q0,
        output_0_2_address1,
        output_0_2_ce1,
        output_0_2_q1,
        output_0_3_address0,
        output_0_3_ce0,
        output_0_3_q0,
        output_0_3_address1,
        output_0_3_ce1,
        output_0_3_q1,
        output_0_4_address0,
        output_0_4_ce0,
        output_0_4_q0,
        output_0_4_address1,
        output_0_4_ce1,
        output_0_4_q1,
        output_0_5_address0,
        output_0_5_ce0,
        output_0_5_q0,
        output_0_5_address1,
        output_0_5_ce1,
        output_0_5_q1,
        output_0_6_address0,
        output_0_6_ce0,
        output_0_6_q0,
        output_0_6_address1,
        output_0_6_ce1,
        output_0_6_q1,
        output_0_7_address0,
        output_0_7_ce0,
        output_0_7_q0,
        output_0_7_address1,
        output_0_7_ce1,
        output_0_7_q1,
        output_1_0_address0,
        output_1_0_ce0,
        output_1_0_q0,
        output_1_0_address1,
        output_1_0_ce1,
        output_1_0_q1,
        output_1_1_address0,
        output_1_1_ce0,
        output_1_1_q0,
        output_1_1_address1,
        output_1_1_ce1,
        output_1_1_q1,
        output_1_2_address0,
        output_1_2_ce0,
        output_1_2_q0,
        output_1_2_address1,
        output_1_2_ce1,
        output_1_2_q1,
        output_1_3_address0,
        output_1_3_ce0,
        output_1_3_q0,
        output_1_3_address1,
        output_1_3_ce1,
        output_1_3_q1,
        output_1_4_address0,
        output_1_4_ce0,
        output_1_4_q0,
        output_1_4_address1,
        output_1_4_ce1,
        output_1_4_q1,
        output_1_5_address0,
        output_1_5_ce0,
        output_1_5_q0,
        output_1_5_address1,
        output_1_5_ce1,
        output_1_5_q1,
        output_1_6_address0,
        output_1_6_ce0,
        output_1_6_q0,
        output_1_6_address1,
        output_1_6_ce1,
        output_1_6_q1,
        output_1_7_address0,
        output_1_7_ce0,
        output_1_7_q0,
        output_1_7_address1,
        output_1_7_ce1,
        output_1_7_q1,
        output_2_0_address0,
        output_2_0_ce0,
        output_2_0_q0,
        output_2_0_address1,
        output_2_0_ce1,
        output_2_0_q1,
        output_2_1_address0,
        output_2_1_ce0,
        output_2_1_q0,
        output_2_1_address1,
        output_2_1_ce1,
        output_2_1_q1,
        output_2_2_address0,
        output_2_2_ce0,
        output_2_2_q0,
        output_2_2_address1,
        output_2_2_ce1,
        output_2_2_q1,
        output_2_3_address0,
        output_2_3_ce0,
        output_2_3_q0,
        output_2_3_address1,
        output_2_3_ce1,
        output_2_3_q1,
        output_2_4_address0,
        output_2_4_ce0,
        output_2_4_q0,
        output_2_4_address1,
        output_2_4_ce1,
        output_2_4_q1,
        output_2_5_address0,
        output_2_5_ce0,
        output_2_5_q0,
        output_2_5_address1,
        output_2_5_ce1,
        output_2_5_q1,
        output_2_6_address0,
        output_2_6_ce0,
        output_2_6_q0,
        output_2_6_address1,
        output_2_6_ce1,
        output_2_6_q1,
        output_2_7_address0,
        output_2_7_ce0,
        output_2_7_q0,
        output_2_7_address1,
        output_2_7_ce1,
        output_2_7_q1,
        output_3_0_address0,
        output_3_0_ce0,
        output_3_0_q0,
        output_3_0_address1,
        output_3_0_ce1,
        output_3_0_q1,
        output_3_1_address0,
        output_3_1_ce0,
        output_3_1_q0,
        output_3_1_address1,
        output_3_1_ce1,
        output_3_1_q1,
        output_3_2_address0,
        output_3_2_ce0,
        output_3_2_q0,
        output_3_2_address1,
        output_3_2_ce1,
        output_3_2_q1,
        output_3_3_address0,
        output_3_3_ce0,
        output_3_3_q0,
        output_3_3_address1,
        output_3_3_ce1,
        output_3_3_q1,
        output_3_4_address0,
        output_3_4_ce0,
        output_3_4_q0,
        output_3_4_address1,
        output_3_4_ce1,
        output_3_4_q1,
        output_3_5_address0,
        output_3_5_ce0,
        output_3_5_q0,
        output_3_5_address1,
        output_3_5_ce1,
        output_3_5_q1,
        output_3_6_address0,
        output_3_6_ce0,
        output_3_6_q0,
        output_3_6_address1,
        output_3_6_ce1,
        output_3_6_q1,
        output_3_7_address0,
        output_3_7_ce0,
        output_3_7_q0,
        output_3_7_address1,
        output_3_7_ce1,
        output_3_7_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_output_AWVALID;
input   m_axi_kernel_output_AWREADY;
output  [63:0] m_axi_kernel_output_AWADDR;
output  [0:0] m_axi_kernel_output_AWID;
output  [31:0] m_axi_kernel_output_AWLEN;
output  [2:0] m_axi_kernel_output_AWSIZE;
output  [1:0] m_axi_kernel_output_AWBURST;
output  [1:0] m_axi_kernel_output_AWLOCK;
output  [3:0] m_axi_kernel_output_AWCACHE;
output  [2:0] m_axi_kernel_output_AWPROT;
output  [3:0] m_axi_kernel_output_AWQOS;
output  [3:0] m_axi_kernel_output_AWREGION;
output  [0:0] m_axi_kernel_output_AWUSER;
output   m_axi_kernel_output_WVALID;
input   m_axi_kernel_output_WREADY;
output  [511:0] m_axi_kernel_output_WDATA;
output  [63:0] m_axi_kernel_output_WSTRB;
output   m_axi_kernel_output_WLAST;
output  [0:0] m_axi_kernel_output_WID;
output  [0:0] m_axi_kernel_output_WUSER;
output   m_axi_kernel_output_ARVALID;
input   m_axi_kernel_output_ARREADY;
output  [63:0] m_axi_kernel_output_ARADDR;
output  [0:0] m_axi_kernel_output_ARID;
output  [31:0] m_axi_kernel_output_ARLEN;
output  [2:0] m_axi_kernel_output_ARSIZE;
output  [1:0] m_axi_kernel_output_ARBURST;
output  [1:0] m_axi_kernel_output_ARLOCK;
output  [3:0] m_axi_kernel_output_ARCACHE;
output  [2:0] m_axi_kernel_output_ARPROT;
output  [3:0] m_axi_kernel_output_ARQOS;
output  [3:0] m_axi_kernel_output_ARREGION;
output  [0:0] m_axi_kernel_output_ARUSER;
input   m_axi_kernel_output_RVALID;
output   m_axi_kernel_output_RREADY;
input  [511:0] m_axi_kernel_output_RDATA;
input   m_axi_kernel_output_RLAST;
input  [0:0] m_axi_kernel_output_RID;
input  [8:0] m_axi_kernel_output_RFIFONUM;
input  [0:0] m_axi_kernel_output_RUSER;
input  [1:0] m_axi_kernel_output_RRESP;
input   m_axi_kernel_output_BVALID;
output   m_axi_kernel_output_BREADY;
input  [1:0] m_axi_kernel_output_BRESP;
input  [0:0] m_axi_kernel_output_BID;
input  [0:0] m_axi_kernel_output_BUSER;
input  [57:0] sext_ln235;
output  [14:0] output_0_0_address0;
output   output_0_0_ce0;
input  [31:0] output_0_0_q0;
output  [14:0] output_0_0_address1;
output   output_0_0_ce1;
input  [31:0] output_0_0_q1;
output  [14:0] output_0_1_address0;
output   output_0_1_ce0;
input  [31:0] output_0_1_q0;
output  [14:0] output_0_1_address1;
output   output_0_1_ce1;
input  [31:0] output_0_1_q1;
output  [14:0] output_0_2_address0;
output   output_0_2_ce0;
input  [31:0] output_0_2_q0;
output  [14:0] output_0_2_address1;
output   output_0_2_ce1;
input  [31:0] output_0_2_q1;
output  [14:0] output_0_3_address0;
output   output_0_3_ce0;
input  [31:0] output_0_3_q0;
output  [14:0] output_0_3_address1;
output   output_0_3_ce1;
input  [31:0] output_0_3_q1;
output  [14:0] output_0_4_address0;
output   output_0_4_ce0;
input  [31:0] output_0_4_q0;
output  [14:0] output_0_4_address1;
output   output_0_4_ce1;
input  [31:0] output_0_4_q1;
output  [14:0] output_0_5_address0;
output   output_0_5_ce0;
input  [31:0] output_0_5_q0;
output  [14:0] output_0_5_address1;
output   output_0_5_ce1;
input  [31:0] output_0_5_q1;
output  [14:0] output_0_6_address0;
output   output_0_6_ce0;
input  [31:0] output_0_6_q0;
output  [14:0] output_0_6_address1;
output   output_0_6_ce1;
input  [31:0] output_0_6_q1;
output  [14:0] output_0_7_address0;
output   output_0_7_ce0;
input  [31:0] output_0_7_q0;
output  [14:0] output_0_7_address1;
output   output_0_7_ce1;
input  [31:0] output_0_7_q1;
output  [14:0] output_1_0_address0;
output   output_1_0_ce0;
input  [31:0] output_1_0_q0;
output  [14:0] output_1_0_address1;
output   output_1_0_ce1;
input  [31:0] output_1_0_q1;
output  [14:0] output_1_1_address0;
output   output_1_1_ce0;
input  [31:0] output_1_1_q0;
output  [14:0] output_1_1_address1;
output   output_1_1_ce1;
input  [31:0] output_1_1_q1;
output  [14:0] output_1_2_address0;
output   output_1_2_ce0;
input  [31:0] output_1_2_q0;
output  [14:0] output_1_2_address1;
output   output_1_2_ce1;
input  [31:0] output_1_2_q1;
output  [14:0] output_1_3_address0;
output   output_1_3_ce0;
input  [31:0] output_1_3_q0;
output  [14:0] output_1_3_address1;
output   output_1_3_ce1;
input  [31:0] output_1_3_q1;
output  [14:0] output_1_4_address0;
output   output_1_4_ce0;
input  [31:0] output_1_4_q0;
output  [14:0] output_1_4_address1;
output   output_1_4_ce1;
input  [31:0] output_1_4_q1;
output  [14:0] output_1_5_address0;
output   output_1_5_ce0;
input  [31:0] output_1_5_q0;
output  [14:0] output_1_5_address1;
output   output_1_5_ce1;
input  [31:0] output_1_5_q1;
output  [14:0] output_1_6_address0;
output   output_1_6_ce0;
input  [31:0] output_1_6_q0;
output  [14:0] output_1_6_address1;
output   output_1_6_ce1;
input  [31:0] output_1_6_q1;
output  [14:0] output_1_7_address0;
output   output_1_7_ce0;
input  [31:0] output_1_7_q0;
output  [14:0] output_1_7_address1;
output   output_1_7_ce1;
input  [31:0] output_1_7_q1;
output  [14:0] output_2_0_address0;
output   output_2_0_ce0;
input  [31:0] output_2_0_q0;
output  [14:0] output_2_0_address1;
output   output_2_0_ce1;
input  [31:0] output_2_0_q1;
output  [14:0] output_2_1_address0;
output   output_2_1_ce0;
input  [31:0] output_2_1_q0;
output  [14:0] output_2_1_address1;
output   output_2_1_ce1;
input  [31:0] output_2_1_q1;
output  [14:0] output_2_2_address0;
output   output_2_2_ce0;
input  [31:0] output_2_2_q0;
output  [14:0] output_2_2_address1;
output   output_2_2_ce1;
input  [31:0] output_2_2_q1;
output  [14:0] output_2_3_address0;
output   output_2_3_ce0;
input  [31:0] output_2_3_q0;
output  [14:0] output_2_3_address1;
output   output_2_3_ce1;
input  [31:0] output_2_3_q1;
output  [14:0] output_2_4_address0;
output   output_2_4_ce0;
input  [31:0] output_2_4_q0;
output  [14:0] output_2_4_address1;
output   output_2_4_ce1;
input  [31:0] output_2_4_q1;
output  [14:0] output_2_5_address0;
output   output_2_5_ce0;
input  [31:0] output_2_5_q0;
output  [14:0] output_2_5_address1;
output   output_2_5_ce1;
input  [31:0] output_2_5_q1;
output  [14:0] output_2_6_address0;
output   output_2_6_ce0;
input  [31:0] output_2_6_q0;
output  [14:0] output_2_6_address1;
output   output_2_6_ce1;
input  [31:0] output_2_6_q1;
output  [14:0] output_2_7_address0;
output   output_2_7_ce0;
input  [31:0] output_2_7_q0;
output  [14:0] output_2_7_address1;
output   output_2_7_ce1;
input  [31:0] output_2_7_q1;
output  [14:0] output_3_0_address0;
output   output_3_0_ce0;
input  [31:0] output_3_0_q0;
output  [14:0] output_3_0_address1;
output   output_3_0_ce1;
input  [31:0] output_3_0_q1;
output  [14:0] output_3_1_address0;
output   output_3_1_ce0;
input  [31:0] output_3_1_q0;
output  [14:0] output_3_1_address1;
output   output_3_1_ce1;
input  [31:0] output_3_1_q1;
output  [14:0] output_3_2_address0;
output   output_3_2_ce0;
input  [31:0] output_3_2_q0;
output  [14:0] output_3_2_address1;
output   output_3_2_ce1;
input  [31:0] output_3_2_q1;
output  [14:0] output_3_3_address0;
output   output_3_3_ce0;
input  [31:0] output_3_3_q0;
output  [14:0] output_3_3_address1;
output   output_3_3_ce1;
input  [31:0] output_3_3_q1;
output  [14:0] output_3_4_address0;
output   output_3_4_ce0;
input  [31:0] output_3_4_q0;
output  [14:0] output_3_4_address1;
output   output_3_4_ce1;
input  [31:0] output_3_4_q1;
output  [14:0] output_3_5_address0;
output   output_3_5_ce0;
input  [31:0] output_3_5_q0;
output  [14:0] output_3_5_address1;
output   output_3_5_ce1;
input  [31:0] output_3_5_q1;
output  [14:0] output_3_6_address0;
output   output_3_6_ce0;
input  [31:0] output_3_6_q0;
output  [14:0] output_3_6_address1;
output   output_3_6_ce1;
input  [31:0] output_3_6_q1;
output  [14:0] output_3_7_address0;
output   output_3_7_ce0;
input  [31:0] output_3_7_q0;
output  [14:0] output_3_7_address1;
output   output_3_7_ce1;
input  [31:0] output_3_7_q1;

reg ap_idle;
reg m_axi_kernel_output_WVALID;
reg output_0_0_ce0;
reg output_0_0_ce1;
reg output_0_1_ce0;
reg output_0_1_ce1;
reg output_0_2_ce0;
reg output_0_2_ce1;
reg output_0_3_ce0;
reg output_0_3_ce1;
reg output_0_4_ce0;
reg output_0_4_ce1;
reg output_0_5_ce0;
reg output_0_5_ce1;
reg output_0_6_ce0;
reg output_0_6_ce1;
reg output_0_7_ce0;
reg output_0_7_ce1;
reg output_1_0_ce0;
reg output_1_0_ce1;
reg output_1_1_ce0;
reg output_1_1_ce1;
reg output_1_2_ce0;
reg output_1_2_ce1;
reg output_1_3_ce0;
reg output_1_3_ce1;
reg output_1_4_ce0;
reg output_1_4_ce1;
reg output_1_5_ce0;
reg output_1_5_ce1;
reg output_1_6_ce0;
reg output_1_6_ce1;
reg output_1_7_ce0;
reg output_1_7_ce1;
reg output_2_0_ce0;
reg output_2_0_ce1;
reg output_2_1_ce0;
reg output_2_1_ce1;
reg output_2_2_ce0;
reg output_2_2_ce1;
reg output_2_3_ce0;
reg output_2_3_ce1;
reg output_2_4_ce0;
reg output_2_4_ce1;
reg output_2_5_ce0;
reg output_2_5_ce1;
reg output_2_6_ce0;
reg output_2_6_ce1;
reg output_2_7_ce0;
reg output_2_7_ce1;
reg output_3_0_ce0;
reg output_3_0_ce1;
reg output_3_1_ce0;
reg output_3_1_ce1;
reg output_3_2_ce0;
reg output_3_2_ce1;
reg output_3_3_ce0;
reg output_3_3_ce1;
reg output_3_4_ce0;
reg output_3_4_ce1;
reg output_3_5_ce0;
reg output_3_5_ce1;
reg output_3_6_ce0;
reg output_3_6_ce1;
reg output_3_7_ce0;
reg output_3_7_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln235_fu_1047_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_output_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln236_fu_1123_p2;
reg   [0:0] or_ln236_reg_1911;
wire   [1:0] trunc_ln236_fu_1171_p1;
reg   [1:0] trunc_ln236_reg_1916;
reg   [1:0] trunc_ln236_reg_1916_pp0_iter2_reg;
wire   [12:0] add_ln250_fu_1189_p2;
reg   [12:0] add_ln250_reg_1936;
wire   [9:0] trunc_ln250_fu_1195_p1;
reg   [9:0] trunc_ln250_reg_1941;
wire   [31:0] tmp_fu_1401_p11;
reg   [31:0] tmp_reg_2266;
wire   [31:0] tmp_1_fu_1424_p11;
reg   [31:0] tmp_1_reg_2271;
wire   [31:0] tmp_2_fu_1447_p11;
reg   [31:0] tmp_2_reg_2276;
wire   [31:0] tmp_3_fu_1470_p11;
reg   [31:0] tmp_3_reg_2281;
wire   [31:0] tmp_4_fu_1493_p11;
reg   [31:0] tmp_4_reg_2286;
wire   [31:0] tmp_5_fu_1516_p11;
reg   [31:0] tmp_5_reg_2291;
wire   [31:0] tmp_6_fu_1539_p11;
reg   [31:0] tmp_6_reg_2296;
wire   [31:0] tmp_7_fu_1562_p11;
reg   [31:0] tmp_7_reg_2301;
wire   [31:0] tmp_8_fu_1585_p11;
reg   [31:0] tmp_8_reg_2306;
wire   [31:0] tmp_9_fu_1608_p11;
reg   [31:0] tmp_9_reg_2311;
wire   [31:0] tmp_s_fu_1631_p11;
reg   [31:0] tmp_s_reg_2316;
wire   [31:0] tmp_10_fu_1654_p11;
reg   [31:0] tmp_10_reg_2321;
wire   [31:0] tmp_11_fu_1677_p11;
reg   [31:0] tmp_11_reg_2326;
wire   [31:0] tmp_12_fu_1700_p11;
reg   [31:0] tmp_12_reg_2331;
wire   [31:0] tmp_13_fu_1723_p11;
reg   [31:0] tmp_13_reg_2336;
wire   [31:0] tmp_14_fu_1746_p11;
reg   [31:0] tmp_14_reg_2341;
wire   [63:0] zext_ln250_4_fu_1302_p1;
wire   [63:0] zext_ln258_1_fu_1354_p1;
wire    ap_block_pp0_stage0_01001;
reg   [7:0] i2_fu_172;
wire   [7:0] add_ln237_fu_1390_p2;
wire    ap_loop_init;
reg   [3:0] indvar_fu_176;
wire   [3:0] select_ln237_fu_1205_p3;
reg   [7:0] i1_fu_180;
wire   [7:0] select_ln236_1_fu_1129_p3;
reg   [11:0] indvar_flatten_fu_184;
wire   [11:0] select_ln236_2_fu_1219_p3;
reg   [4:0] i0_fu_188;
wire   [4:0] select_ln235_1_fu_1109_p3;
reg   [15:0] indvar_flatten13_fu_192;
wire   [15:0] add_ln235_fu_1053_p2;
wire   [0:0] icmp_ln236_fu_1077_p2;
wire   [0:0] icmp_ln237_fu_1097_p2;
wire   [0:0] xor_ln235_fu_1091_p2;
wire   [4:0] add_ln235_1_fu_1071_p2;
wire   [7:0] select_ln235_fu_1083_p3;
wire   [0:0] and_ln235_fu_1103_p2;
wire   [7:0] add_ln236_fu_1117_p2;
wire   [10:0] tmp_15_fu_1137_p3;
wire   [7:0] tmp_16_fu_1149_p3;
wire   [11:0] zext_ln250_fu_1145_p1;
wire   [11:0] zext_ln250_1_fu_1157_p1;
wire   [11:0] sub_ln250_fu_1161_p2;
wire   [5:0] lshr_ln_fu_1175_p4;
wire  signed [12:0] sext_ln236_fu_1167_p1;
wire   [12:0] zext_ln250_2_fu_1185_p1;
wire   [3:0] add_ln237_1_fu_1199_p2;
wire   [11:0] add_ln236_1_fu_1213_p2;
wire   [14:0] tmp_17_fu_1262_p3;
wire   [14:0] tmp_18_fu_1269_p3;
wire   [7:0] select_ln236_fu_1255_p3;
wire   [4:0] lshr_ln1_fu_1282_p4;
wire   [14:0] sub_ln250_1_fu_1276_p2;
wire   [14:0] zext_ln250_3_fu_1292_p1;
wire   [14:0] add_ln250_1_fu_1296_p2;
wire   [4:0] or_ln258_fu_1338_p2;
wire   [14:0] zext_ln258_fu_1344_p1;
wire   [14:0] add_ln258_fu_1348_p2;
wire   [31:0] tmp_fu_1401_p9;
wire   [31:0] tmp_1_fu_1424_p9;
wire   [31:0] tmp_2_fu_1447_p9;
wire   [31:0] tmp_3_fu_1470_p9;
wire   [31:0] tmp_4_fu_1493_p9;
wire   [31:0] tmp_5_fu_1516_p9;
wire   [31:0] tmp_6_fu_1539_p9;
wire   [31:0] tmp_7_fu_1562_p9;
wire   [31:0] tmp_8_fu_1585_p9;
wire   [31:0] tmp_9_fu_1608_p9;
wire   [31:0] tmp_s_fu_1631_p9;
wire   [31:0] tmp_10_fu_1654_p9;
wire   [31:0] tmp_11_fu_1677_p9;
wire   [31:0] tmp_12_fu_1700_p9;
wire   [31:0] tmp_13_fu_1723_p9;
wire   [31:0] tmp_14_fu_1746_p9;
wire   [31:0] bitcast_ln271_15_fu_1820_p1;
wire   [31:0] bitcast_ln271_14_fu_1817_p1;
wire   [31:0] bitcast_ln271_13_fu_1814_p1;
wire   [31:0] bitcast_ln271_12_fu_1811_p1;
wire   [31:0] bitcast_ln271_11_fu_1808_p1;
wire   [31:0] bitcast_ln271_10_fu_1805_p1;
wire   [31:0] bitcast_ln271_9_fu_1802_p1;
wire   [31:0] bitcast_ln271_8_fu_1799_p1;
wire   [31:0] bitcast_ln271_7_fu_1796_p1;
wire   [31:0] bitcast_ln271_6_fu_1793_p1;
wire   [31:0] bitcast_ln271_5_fu_1790_p1;
wire   [31:0] bitcast_ln271_4_fu_1787_p1;
wire   [31:0] bitcast_ln271_3_fu_1784_p1;
wire   [31:0] bitcast_ln271_2_fu_1781_p1;
wire   [31:0] bitcast_ln271_1_fu_1778_p1;
wire   [31:0] bitcast_ln271_fu_1775_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [1:0] tmp_fu_1401_p1;
wire   [1:0] tmp_fu_1401_p3;
wire  signed [1:0] tmp_fu_1401_p5;
wire  signed [1:0] tmp_fu_1401_p7;
wire   [1:0] tmp_1_fu_1424_p1;
wire   [1:0] tmp_1_fu_1424_p3;
wire  signed [1:0] tmp_1_fu_1424_p5;
wire  signed [1:0] tmp_1_fu_1424_p7;
wire   [1:0] tmp_2_fu_1447_p1;
wire   [1:0] tmp_2_fu_1447_p3;
wire  signed [1:0] tmp_2_fu_1447_p5;
wire  signed [1:0] tmp_2_fu_1447_p7;
wire   [1:0] tmp_3_fu_1470_p1;
wire   [1:0] tmp_3_fu_1470_p3;
wire  signed [1:0] tmp_3_fu_1470_p5;
wire  signed [1:0] tmp_3_fu_1470_p7;
wire   [1:0] tmp_4_fu_1493_p1;
wire   [1:0] tmp_4_fu_1493_p3;
wire  signed [1:0] tmp_4_fu_1493_p5;
wire  signed [1:0] tmp_4_fu_1493_p7;
wire   [1:0] tmp_5_fu_1516_p1;
wire   [1:0] tmp_5_fu_1516_p3;
wire  signed [1:0] tmp_5_fu_1516_p5;
wire  signed [1:0] tmp_5_fu_1516_p7;
wire   [1:0] tmp_6_fu_1539_p1;
wire   [1:0] tmp_6_fu_1539_p3;
wire  signed [1:0] tmp_6_fu_1539_p5;
wire  signed [1:0] tmp_6_fu_1539_p7;
wire   [1:0] tmp_7_fu_1562_p1;
wire   [1:0] tmp_7_fu_1562_p3;
wire  signed [1:0] tmp_7_fu_1562_p5;
wire  signed [1:0] tmp_7_fu_1562_p7;
wire   [1:0] tmp_8_fu_1585_p1;
wire   [1:0] tmp_8_fu_1585_p3;
wire  signed [1:0] tmp_8_fu_1585_p5;
wire  signed [1:0] tmp_8_fu_1585_p7;
wire   [1:0] tmp_9_fu_1608_p1;
wire   [1:0] tmp_9_fu_1608_p3;
wire  signed [1:0] tmp_9_fu_1608_p5;
wire  signed [1:0] tmp_9_fu_1608_p7;
wire   [1:0] tmp_s_fu_1631_p1;
wire   [1:0] tmp_s_fu_1631_p3;
wire  signed [1:0] tmp_s_fu_1631_p5;
wire  signed [1:0] tmp_s_fu_1631_p7;
wire   [1:0] tmp_10_fu_1654_p1;
wire   [1:0] tmp_10_fu_1654_p3;
wire  signed [1:0] tmp_10_fu_1654_p5;
wire  signed [1:0] tmp_10_fu_1654_p7;
wire   [1:0] tmp_11_fu_1677_p1;
wire   [1:0] tmp_11_fu_1677_p3;
wire  signed [1:0] tmp_11_fu_1677_p5;
wire  signed [1:0] tmp_11_fu_1677_p7;
wire   [1:0] tmp_12_fu_1700_p1;
wire   [1:0] tmp_12_fu_1700_p3;
wire  signed [1:0] tmp_12_fu_1700_p5;
wire  signed [1:0] tmp_12_fu_1700_p7;
wire   [1:0] tmp_13_fu_1723_p1;
wire   [1:0] tmp_13_fu_1723_p3;
wire  signed [1:0] tmp_13_fu_1723_p5;
wire  signed [1:0] tmp_13_fu_1723_p7;
wire   [1:0] tmp_14_fu_1746_p1;
wire   [1:0] tmp_14_fu_1746_p3;
wire  signed [1:0] tmp_14_fu_1746_p5;
wire  signed [1:0] tmp_14_fu_1746_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i2_fu_172 = 8'd0;
#0 indvar_fu_176 = 4'd0;
#0 i1_fu_180 = 8'd0;
#0 indvar_flatten_fu_184 = 12'd0;
#0 i0_fu_188 = 5'd0;
#0 indvar_flatten13_fu_192 = 16'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2210(
    .din0(output_0_0_q1),
    .din1(output_1_0_q1),
    .din2(output_2_0_q1),
    .din3(output_3_0_q1),
    .def(tmp_fu_1401_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_fu_1401_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2211(
    .din0(output_0_1_q1),
    .din1(output_1_1_q1),
    .din2(output_2_1_q1),
    .din3(output_3_1_q1),
    .def(tmp_1_fu_1424_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_1_fu_1424_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2212(
    .din0(output_0_2_q1),
    .din1(output_1_2_q1),
    .din2(output_2_2_q1),
    .din3(output_3_2_q1),
    .def(tmp_2_fu_1447_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_2_fu_1447_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2213(
    .din0(output_0_3_q1),
    .din1(output_1_3_q1),
    .din2(output_2_3_q1),
    .din3(output_3_3_q1),
    .def(tmp_3_fu_1470_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_3_fu_1470_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2214(
    .din0(output_0_4_q1),
    .din1(output_1_4_q1),
    .din2(output_2_4_q1),
    .din3(output_3_4_q1),
    .def(tmp_4_fu_1493_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_4_fu_1493_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2215(
    .din0(output_0_5_q1),
    .din1(output_1_5_q1),
    .din2(output_2_5_q1),
    .din3(output_3_5_q1),
    .def(tmp_5_fu_1516_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_5_fu_1516_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2216(
    .din0(output_0_6_q1),
    .din1(output_1_6_q1),
    .din2(output_2_6_q1),
    .din3(output_3_6_q1),
    .def(tmp_6_fu_1539_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_6_fu_1539_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2217(
    .din0(output_0_7_q1),
    .din1(output_1_7_q1),
    .din2(output_2_7_q1),
    .din3(output_3_7_q1),
    .def(tmp_7_fu_1562_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_7_fu_1562_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2218(
    .din0(output_0_0_q0),
    .din1(output_1_0_q0),
    .din2(output_2_0_q0),
    .din3(output_3_0_q0),
    .def(tmp_8_fu_1585_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_8_fu_1585_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2219(
    .din0(output_0_1_q0),
    .din1(output_1_1_q0),
    .din2(output_2_1_q0),
    .din3(output_3_1_q0),
    .def(tmp_9_fu_1608_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_9_fu_1608_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2220(
    .din0(output_0_2_q0),
    .din1(output_1_2_q0),
    .din2(output_2_2_q0),
    .din3(output_3_2_q0),
    .def(tmp_s_fu_1631_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_s_fu_1631_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2221(
    .din0(output_0_3_q0),
    .din1(output_1_3_q0),
    .din2(output_2_3_q0),
    .din3(output_3_3_q0),
    .def(tmp_10_fu_1654_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_10_fu_1654_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2222(
    .din0(output_0_4_q0),
    .din1(output_1_4_q0),
    .din2(output_2_4_q0),
    .din3(output_3_4_q0),
    .def(tmp_11_fu_1677_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_11_fu_1677_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2223(
    .din0(output_0_5_q0),
    .din1(output_1_5_q0),
    .din2(output_2_5_q0),
    .din3(output_3_5_q0),
    .def(tmp_12_fu_1700_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_12_fu_1700_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2224(
    .din0(output_0_6_q0),
    .din1(output_1_6_q0),
    .din2(output_2_6_q0),
    .din3(output_3_6_q0),
    .def(tmp_13_fu_1723_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_13_fu_1723_p11)
);

kernel_cnn_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U2225(
    .din0(output_0_7_q0),
    .din1(output_1_7_q0),
    .din2(output_2_7_q0),
    .din3(output_3_7_q0),
    .def(tmp_14_fu_1746_p9),
    .sel(trunc_ln236_reg_1916_pp0_iter2_reg),
    .dout(tmp_14_fu_1746_p11)
);

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i0_fu_188 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_1047_p2 == 1'd0))) begin
            i0_fu_188 <= select_ln235_1_fu_1109_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i1_fu_180 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_1047_p2 == 1'd0))) begin
            i1_fu_180 <= select_ln236_1_fu_1129_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i2_fu_172 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i2_fu_172 <= add_ln237_fu_1390_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_192 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_1047_p2 == 1'd0))) begin
            indvar_flatten13_fu_192 <= add_ln235_fu_1053_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_184 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_1047_p2 == 1'd0))) begin
            indvar_flatten_fu_184 <= select_ln236_2_fu_1219_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_fu_176 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_1047_p2 == 1'd0))) begin
            indvar_fu_176 <= select_ln237_fu_1205_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln250_reg_1936 <= add_ln250_fu_1189_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        or_ln236_reg_1911 <= or_ln236_fu_1123_p2;
        trunc_ln236_reg_1916 <= trunc_ln236_fu_1171_p1;
        trunc_ln250_reg_1941 <= trunc_ln250_fu_1195_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        tmp_10_reg_2321 <= tmp_10_fu_1654_p11;
        tmp_11_reg_2326 <= tmp_11_fu_1677_p11;
        tmp_12_reg_2331 <= tmp_12_fu_1700_p11;
        tmp_13_reg_2336 <= tmp_13_fu_1723_p11;
        tmp_14_reg_2341 <= tmp_14_fu_1746_p11;
        tmp_1_reg_2271 <= tmp_1_fu_1424_p11;
        tmp_2_reg_2276 <= tmp_2_fu_1447_p11;
        tmp_3_reg_2281 <= tmp_3_fu_1470_p11;
        tmp_4_reg_2286 <= tmp_4_fu_1493_p11;
        tmp_5_reg_2291 <= tmp_5_fu_1516_p11;
        tmp_6_reg_2296 <= tmp_6_fu_1539_p11;
        tmp_7_reg_2301 <= tmp_7_fu_1562_p11;
        tmp_8_reg_2306 <= tmp_8_fu_1585_p11;
        tmp_9_reg_2311 <= tmp_9_fu_1608_p11;
        tmp_reg_2266 <= tmp_fu_1401_p11;
        tmp_s_reg_2316 <= tmp_s_fu_1631_p11;
        trunc_ln236_reg_1916_pp0_iter2_reg <= trunc_ln236_reg_1916;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_fu_1047_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        kernel_output_blk_n_W = m_axi_kernel_output_WREADY;
    end else begin
        kernel_output_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_kernel_output_WVALID = 1'b1;
    end else begin
        m_axi_kernel_output_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_0_ce0 = 1'b1;
    end else begin
        output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_0_ce1 = 1'b1;
    end else begin
        output_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_1_ce0 = 1'b1;
    end else begin
        output_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_1_ce1 = 1'b1;
    end else begin
        output_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_2_ce0 = 1'b1;
    end else begin
        output_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_2_ce1 = 1'b1;
    end else begin
        output_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_3_ce0 = 1'b1;
    end else begin
        output_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_3_ce1 = 1'b1;
    end else begin
        output_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_4_ce0 = 1'b1;
    end else begin
        output_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_4_ce1 = 1'b1;
    end else begin
        output_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_5_ce0 = 1'b1;
    end else begin
        output_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_5_ce1 = 1'b1;
    end else begin
        output_0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_6_ce0 = 1'b1;
    end else begin
        output_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_6_ce1 = 1'b1;
    end else begin
        output_0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_7_ce0 = 1'b1;
    end else begin
        output_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_7_ce1 = 1'b1;
    end else begin
        output_0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_0_ce0 = 1'b1;
    end else begin
        output_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_0_ce1 = 1'b1;
    end else begin
        output_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_1_ce0 = 1'b1;
    end else begin
        output_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_1_ce1 = 1'b1;
    end else begin
        output_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_2_ce0 = 1'b1;
    end else begin
        output_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_2_ce1 = 1'b1;
    end else begin
        output_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_3_ce0 = 1'b1;
    end else begin
        output_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_3_ce1 = 1'b1;
    end else begin
        output_1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_4_ce0 = 1'b1;
    end else begin
        output_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_4_ce1 = 1'b1;
    end else begin
        output_1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_5_ce0 = 1'b1;
    end else begin
        output_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_5_ce1 = 1'b1;
    end else begin
        output_1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_6_ce0 = 1'b1;
    end else begin
        output_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_6_ce1 = 1'b1;
    end else begin
        output_1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_7_ce0 = 1'b1;
    end else begin
        output_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_7_ce1 = 1'b1;
    end else begin
        output_1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_0_ce0 = 1'b1;
    end else begin
        output_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_0_ce1 = 1'b1;
    end else begin
        output_2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_1_ce0 = 1'b1;
    end else begin
        output_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_1_ce1 = 1'b1;
    end else begin
        output_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_2_ce0 = 1'b1;
    end else begin
        output_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_2_ce1 = 1'b1;
    end else begin
        output_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_3_ce0 = 1'b1;
    end else begin
        output_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_3_ce1 = 1'b1;
    end else begin
        output_2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_4_ce0 = 1'b1;
    end else begin
        output_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_4_ce1 = 1'b1;
    end else begin
        output_2_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_5_ce0 = 1'b1;
    end else begin
        output_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_5_ce1 = 1'b1;
    end else begin
        output_2_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_6_ce0 = 1'b1;
    end else begin
        output_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_6_ce1 = 1'b1;
    end else begin
        output_2_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_7_ce0 = 1'b1;
    end else begin
        output_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_7_ce1 = 1'b1;
    end else begin
        output_2_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_0_ce0 = 1'b1;
    end else begin
        output_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_0_ce1 = 1'b1;
    end else begin
        output_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_1_ce0 = 1'b1;
    end else begin
        output_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_1_ce1 = 1'b1;
    end else begin
        output_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_2_ce0 = 1'b1;
    end else begin
        output_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_2_ce1 = 1'b1;
    end else begin
        output_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_3_ce0 = 1'b1;
    end else begin
        output_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_3_ce1 = 1'b1;
    end else begin
        output_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_4_ce0 = 1'b1;
    end else begin
        output_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_4_ce1 = 1'b1;
    end else begin
        output_3_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_5_ce0 = 1'b1;
    end else begin
        output_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_5_ce1 = 1'b1;
    end else begin
        output_3_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_6_ce0 = 1'b1;
    end else begin
        output_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_6_ce1 = 1'b1;
    end else begin
        output_3_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_7_ce0 = 1'b1;
    end else begin
        output_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_7_ce1 = 1'b1;
    end else begin
        output_3_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln235_1_fu_1071_p2 = (i0_fu_188 + 5'd1);

assign add_ln235_fu_1053_p2 = (indvar_flatten13_fu_192 + 16'd1);

assign add_ln236_1_fu_1213_p2 = (indvar_flatten_fu_184 + 12'd1);

assign add_ln236_fu_1117_p2 = (select_ln235_fu_1083_p3 + 8'd1);

assign add_ln237_1_fu_1199_p2 = (indvar_fu_176 + 4'd1);

assign add_ln237_fu_1390_p2 = (select_ln236_fu_1255_p3 + 8'd16);

assign add_ln250_1_fu_1296_p2 = (sub_ln250_1_fu_1276_p2 + zext_ln250_3_fu_1292_p1);

assign add_ln250_fu_1189_p2 = ($signed(sext_ln236_fu_1167_p1) + $signed(zext_ln250_2_fu_1185_p1));

assign add_ln258_fu_1348_p2 = (sub_ln250_1_fu_1276_p2 + zext_ln258_fu_1344_p1);

assign and_ln235_fu_1103_p2 = (xor_ln235_fu_1091_p2 & icmp_ln237_fu_1097_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_kernel_output_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_kernel_output_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln271_10_fu_1805_p1 = tmp_s_reg_2316;

assign bitcast_ln271_11_fu_1808_p1 = tmp_10_reg_2321;

assign bitcast_ln271_12_fu_1811_p1 = tmp_11_reg_2326;

assign bitcast_ln271_13_fu_1814_p1 = tmp_12_reg_2331;

assign bitcast_ln271_14_fu_1817_p1 = tmp_13_reg_2336;

assign bitcast_ln271_15_fu_1820_p1 = tmp_14_reg_2341;

assign bitcast_ln271_1_fu_1778_p1 = tmp_1_reg_2271;

assign bitcast_ln271_2_fu_1781_p1 = tmp_2_reg_2276;

assign bitcast_ln271_3_fu_1784_p1 = tmp_3_reg_2281;

assign bitcast_ln271_4_fu_1787_p1 = tmp_4_reg_2286;

assign bitcast_ln271_5_fu_1790_p1 = tmp_5_reg_2291;

assign bitcast_ln271_6_fu_1793_p1 = tmp_6_reg_2296;

assign bitcast_ln271_7_fu_1796_p1 = tmp_7_reg_2301;

assign bitcast_ln271_8_fu_1799_p1 = tmp_8_reg_2306;

assign bitcast_ln271_9_fu_1802_p1 = tmp_9_reg_2311;

assign bitcast_ln271_fu_1775_p1 = tmp_reg_2266;

assign icmp_ln235_fu_1047_p2 = ((indvar_flatten13_fu_192 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_1077_p2 = ((indvar_flatten_fu_184 == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_1097_p2 = ((indvar_fu_176 == 4'd14) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_1282_p4 = {{select_ln236_fu_1255_p3[7:3]}};

assign lshr_ln_fu_1175_p4 = {{select_ln236_1_fu_1129_p3[7:2]}};

assign m_axi_kernel_output_ARADDR = 64'd0;

assign m_axi_kernel_output_ARBURST = 2'd0;

assign m_axi_kernel_output_ARCACHE = 4'd0;

assign m_axi_kernel_output_ARID = 1'd0;

assign m_axi_kernel_output_ARLEN = 32'd0;

assign m_axi_kernel_output_ARLOCK = 2'd0;

assign m_axi_kernel_output_ARPROT = 3'd0;

assign m_axi_kernel_output_ARQOS = 4'd0;

assign m_axi_kernel_output_ARREGION = 4'd0;

assign m_axi_kernel_output_ARSIZE = 3'd0;

assign m_axi_kernel_output_ARUSER = 1'd0;

assign m_axi_kernel_output_ARVALID = 1'b0;

assign m_axi_kernel_output_AWADDR = 64'd0;

assign m_axi_kernel_output_AWBURST = 2'd0;

assign m_axi_kernel_output_AWCACHE = 4'd0;

assign m_axi_kernel_output_AWID = 1'd0;

assign m_axi_kernel_output_AWLEN = 32'd0;

assign m_axi_kernel_output_AWLOCK = 2'd0;

assign m_axi_kernel_output_AWPROT = 3'd0;

assign m_axi_kernel_output_AWQOS = 4'd0;

assign m_axi_kernel_output_AWREGION = 4'd0;

assign m_axi_kernel_output_AWSIZE = 3'd0;

assign m_axi_kernel_output_AWUSER = 1'd0;

assign m_axi_kernel_output_AWVALID = 1'b0;

assign m_axi_kernel_output_BREADY = 1'b0;

assign m_axi_kernel_output_RREADY = 1'b0;

assign m_axi_kernel_output_WDATA = {{{{{{{{{{{{{{{{bitcast_ln271_15_fu_1820_p1}, {bitcast_ln271_14_fu_1817_p1}}, {bitcast_ln271_13_fu_1814_p1}}, {bitcast_ln271_12_fu_1811_p1}}, {bitcast_ln271_11_fu_1808_p1}}, {bitcast_ln271_10_fu_1805_p1}}, {bitcast_ln271_9_fu_1802_p1}}, {bitcast_ln271_8_fu_1799_p1}}, {bitcast_ln271_7_fu_1796_p1}}, {bitcast_ln271_6_fu_1793_p1}}, {bitcast_ln271_5_fu_1790_p1}}, {bitcast_ln271_4_fu_1787_p1}}, {bitcast_ln271_3_fu_1784_p1}}, {bitcast_ln271_2_fu_1781_p1}}, {bitcast_ln271_1_fu_1778_p1}}, {bitcast_ln271_fu_1775_p1}};

assign m_axi_kernel_output_WID = 1'd0;

assign m_axi_kernel_output_WLAST = 1'b0;

assign m_axi_kernel_output_WSTRB = 64'd18446744073709551615;

assign m_axi_kernel_output_WUSER = 1'd0;

assign or_ln236_fu_1123_p2 = (icmp_ln236_fu_1077_p2 | and_ln235_fu_1103_p2);

assign or_ln258_fu_1338_p2 = (lshr_ln1_fu_1282_p4 | 5'd1);

assign output_0_0_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_0_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_1_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_1_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_2_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_2_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_3_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_3_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_4_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_4_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_5_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_5_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_6_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_6_address1 = zext_ln250_4_fu_1302_p1;

assign output_0_7_address0 = zext_ln258_1_fu_1354_p1;

assign output_0_7_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_0_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_0_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_1_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_1_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_2_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_2_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_3_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_3_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_4_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_4_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_5_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_5_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_6_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_6_address1 = zext_ln250_4_fu_1302_p1;

assign output_1_7_address0 = zext_ln258_1_fu_1354_p1;

assign output_1_7_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_0_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_0_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_1_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_1_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_2_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_2_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_3_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_3_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_4_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_4_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_5_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_5_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_6_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_6_address1 = zext_ln250_4_fu_1302_p1;

assign output_2_7_address0 = zext_ln258_1_fu_1354_p1;

assign output_2_7_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_0_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_0_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_1_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_1_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_2_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_2_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_3_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_3_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_4_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_4_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_5_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_5_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_6_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_6_address1 = zext_ln250_4_fu_1302_p1;

assign output_3_7_address0 = zext_ln258_1_fu_1354_p1;

assign output_3_7_address1 = zext_ln250_4_fu_1302_p1;

assign select_ln235_1_fu_1109_p3 = ((icmp_ln236_fu_1077_p2[0:0] == 1'b1) ? add_ln235_1_fu_1071_p2 : i0_fu_188);

assign select_ln235_fu_1083_p3 = ((icmp_ln236_fu_1077_p2[0:0] == 1'b1) ? 8'd0 : i1_fu_180);

assign select_ln236_1_fu_1129_p3 = ((and_ln235_fu_1103_p2[0:0] == 1'b1) ? add_ln236_fu_1117_p2 : select_ln235_fu_1083_p3);

assign select_ln236_2_fu_1219_p3 = ((icmp_ln236_fu_1077_p2[0:0] == 1'b1) ? 12'd1 : add_ln236_1_fu_1213_p2);

assign select_ln236_fu_1255_p3 = ((or_ln236_reg_1911[0:0] == 1'b1) ? 8'd0 : i2_fu_172);

assign select_ln237_fu_1205_p3 = ((or_ln236_fu_1123_p2[0:0] == 1'b1) ? 4'd1 : add_ln237_1_fu_1199_p2);

assign sext_ln236_fu_1167_p1 = $signed(sub_ln250_fu_1161_p2);

assign sub_ln250_1_fu_1276_p2 = (tmp_17_fu_1262_p3 - tmp_18_fu_1269_p3);

assign sub_ln250_fu_1161_p2 = (zext_ln250_fu_1145_p1 - zext_ln250_1_fu_1157_p1);

assign tmp_10_fu_1654_p9 = 'bx;

assign tmp_11_fu_1677_p9 = 'bx;

assign tmp_12_fu_1700_p9 = 'bx;

assign tmp_13_fu_1723_p9 = 'bx;

assign tmp_14_fu_1746_p9 = 'bx;

assign tmp_15_fu_1137_p3 = {{select_ln235_1_fu_1109_p3}, {6'd0}};

assign tmp_16_fu_1149_p3 = {{select_ln235_1_fu_1109_p3}, {3'd0}};

assign tmp_17_fu_1262_p3 = {{trunc_ln250_reg_1941}, {5'd0}};

assign tmp_18_fu_1269_p3 = {{add_ln250_reg_1936}, {2'd0}};

assign tmp_1_fu_1424_p9 = 'bx;

assign tmp_2_fu_1447_p9 = 'bx;

assign tmp_3_fu_1470_p9 = 'bx;

assign tmp_4_fu_1493_p9 = 'bx;

assign tmp_5_fu_1516_p9 = 'bx;

assign tmp_6_fu_1539_p9 = 'bx;

assign tmp_7_fu_1562_p9 = 'bx;

assign tmp_8_fu_1585_p9 = 'bx;

assign tmp_9_fu_1608_p9 = 'bx;

assign tmp_fu_1401_p9 = 'bx;

assign tmp_s_fu_1631_p9 = 'bx;

assign trunc_ln236_fu_1171_p1 = select_ln236_1_fu_1129_p3[1:0];

assign trunc_ln250_fu_1195_p1 = add_ln250_fu_1189_p2[9:0];

assign xor_ln235_fu_1091_p2 = (icmp_ln236_fu_1077_p2 ^ 1'd1);

assign zext_ln250_1_fu_1157_p1 = tmp_16_fu_1149_p3;

assign zext_ln250_2_fu_1185_p1 = lshr_ln_fu_1175_p4;

assign zext_ln250_3_fu_1292_p1 = lshr_ln1_fu_1282_p4;

assign zext_ln250_4_fu_1302_p1 = add_ln250_1_fu_1296_p2;

assign zext_ln250_fu_1145_p1 = tmp_15_fu_1137_p3;

assign zext_ln258_1_fu_1354_p1 = add_ln258_fu_1348_p2;

assign zext_ln258_fu_1344_p1 = or_ln258_fu_1338_p2;

endmodule //kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3
