-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_output_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_output_AWREADY : IN STD_LOGIC;
    m_axi_kernel_output_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WVALID : OUT STD_LOGIC;
    m_axi_kernel_output_WREADY : IN STD_LOGIC;
    m_axi_kernel_output_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_WLAST : OUT STD_LOGIC;
    m_axi_kernel_output_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_output_ARREADY : IN STD_LOGIC;
    m_axi_kernel_output_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RVALID : IN STD_LOGIC;
    m_axi_kernel_output_RREADY : OUT STD_LOGIC;
    m_axi_kernel_output_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_RLAST : IN STD_LOGIC;
    m_axi_kernel_output_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_output_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BVALID : IN STD_LOGIC;
    m_axi_kernel_output_BREADY : OUT STD_LOGIC;
    m_axi_kernel_output_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln235 : IN STD_LOGIC_VECTOR (57 downto 0);
    output_0_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_0_ce0 : OUT STD_LOGIC;
    output_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_0_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_0_ce1 : OUT STD_LOGIC;
    output_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_1_ce0 : OUT STD_LOGIC;
    output_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_1_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_1_ce1 : OUT STD_LOGIC;
    output_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_2_ce0 : OUT STD_LOGIC;
    output_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_2_ce1 : OUT STD_LOGIC;
    output_0_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_3_ce0 : OUT STD_LOGIC;
    output_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_3_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_3_ce1 : OUT STD_LOGIC;
    output_0_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_4_ce0 : OUT STD_LOGIC;
    output_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_4_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_4_ce1 : OUT STD_LOGIC;
    output_0_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_5_ce0 : OUT STD_LOGIC;
    output_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_5_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_5_ce1 : OUT STD_LOGIC;
    output_0_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_6_ce0 : OUT STD_LOGIC;
    output_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_6_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_6_ce1 : OUT STD_LOGIC;
    output_0_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_7_ce0 : OUT STD_LOGIC;
    output_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_7_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_0_7_ce1 : OUT STD_LOGIC;
    output_0_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_0_ce0 : OUT STD_LOGIC;
    output_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_0_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_0_ce1 : OUT STD_LOGIC;
    output_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_1_ce0 : OUT STD_LOGIC;
    output_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_1_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_1_ce1 : OUT STD_LOGIC;
    output_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_2_ce0 : OUT STD_LOGIC;
    output_1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_2_ce1 : OUT STD_LOGIC;
    output_1_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_3_ce0 : OUT STD_LOGIC;
    output_1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_3_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_3_ce1 : OUT STD_LOGIC;
    output_1_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_4_ce0 : OUT STD_LOGIC;
    output_1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_4_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_4_ce1 : OUT STD_LOGIC;
    output_1_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_5_ce0 : OUT STD_LOGIC;
    output_1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_5_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_5_ce1 : OUT STD_LOGIC;
    output_1_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_6_ce0 : OUT STD_LOGIC;
    output_1_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_6_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_6_ce1 : OUT STD_LOGIC;
    output_1_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_7_ce0 : OUT STD_LOGIC;
    output_1_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_7_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_1_7_ce1 : OUT STD_LOGIC;
    output_1_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_0_ce0 : OUT STD_LOGIC;
    output_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_0_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_0_ce1 : OUT STD_LOGIC;
    output_2_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_1_ce0 : OUT STD_LOGIC;
    output_2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_1_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_1_ce1 : OUT STD_LOGIC;
    output_2_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_2_ce0 : OUT STD_LOGIC;
    output_2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_2_ce1 : OUT STD_LOGIC;
    output_2_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_3_ce0 : OUT STD_LOGIC;
    output_2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_3_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_3_ce1 : OUT STD_LOGIC;
    output_2_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_4_ce0 : OUT STD_LOGIC;
    output_2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_4_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_4_ce1 : OUT STD_LOGIC;
    output_2_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_5_ce0 : OUT STD_LOGIC;
    output_2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_5_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_5_ce1 : OUT STD_LOGIC;
    output_2_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_6_ce0 : OUT STD_LOGIC;
    output_2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_6_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_6_ce1 : OUT STD_LOGIC;
    output_2_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_7_ce0 : OUT STD_LOGIC;
    output_2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_7_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_2_7_ce1 : OUT STD_LOGIC;
    output_2_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_0_ce0 : OUT STD_LOGIC;
    output_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_0_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_0_ce1 : OUT STD_LOGIC;
    output_3_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_1_ce0 : OUT STD_LOGIC;
    output_3_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_1_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_1_ce1 : OUT STD_LOGIC;
    output_3_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_2_ce0 : OUT STD_LOGIC;
    output_3_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_2_ce1 : OUT STD_LOGIC;
    output_3_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_3_ce0 : OUT STD_LOGIC;
    output_3_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_3_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_3_ce1 : OUT STD_LOGIC;
    output_3_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_4_ce0 : OUT STD_LOGIC;
    output_3_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_4_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_4_ce1 : OUT STD_LOGIC;
    output_3_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_5_ce0 : OUT STD_LOGIC;
    output_3_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_5_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_5_ce1 : OUT STD_LOGIC;
    output_3_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_6_ce0 : OUT STD_LOGIC;
    output_3_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_6_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_6_ce1 : OUT STD_LOGIC;
    output_3_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_7_ce0 : OUT STD_LOGIC;
    output_3_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_7_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_3_7_ce1 : OUT STD_LOGIC;
    output_3_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_C400 : STD_LOGIC_VECTOR (15 downto 0) := "1100010000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_output_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln236_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln236_reg_1911 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln236_fu_1171_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln236_reg_1916 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln236_reg_1916_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln250_fu_1189_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln250_reg_1936 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln250_fu_1195_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln250_reg_1941 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_1401_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2266 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1424_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2271 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1447_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_2276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1470_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_2281 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1493_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_2286 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1516_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_2291 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1539_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_2296 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1562_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_2301 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1585_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2306 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1608_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_2311 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1631_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1654_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_2321 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1677_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2326 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1700_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_2331 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1723_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_2336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1746_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_2341 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln250_4_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_1_fu_1354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i2_fu_172 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln237_fu_1390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_fu_176 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln237_fu_1205_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_fu_180 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln236_1_fu_1129_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_184 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln236_2_fu_1219_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i0_fu_188 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln235_1_fu_1109_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_fu_192 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln235_fu_1053_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln236_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln235_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln235_1_fu_1071_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln235_fu_1083_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln235_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln236_fu_1117_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1137_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_1149_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln250_fu_1145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln250_1_fu_1157_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln250_fu_1161_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln_fu_1175_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln236_fu_1167_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln250_2_fu_1185_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln237_1_fu_1199_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln236_1_fu_1213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_1262_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_1269_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln236_fu_1255_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_1282_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln250_1_fu_1276_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln250_3_fu_1292_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln250_1_fu_1296_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln258_fu_1338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln258_fu_1344_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln258_fu_1348_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_1401_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1424_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1447_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1470_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1493_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1516_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1539_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1562_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1585_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1608_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1631_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1654_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1677_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1700_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1723_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1746_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_15_fu_1820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_14_fu_1817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_13_fu_1814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_12_fu_1811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_11_fu_1808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_10_fu_1805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_9_fu_1802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_8_fu_1799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_7_fu_1796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_6_fu_1793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_5_fu_1790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_4_fu_1787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_3_fu_1784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_2_fu_1781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_1_fu_1778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_fu_1775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_fu_1401_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_1401_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_1401_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_1401_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1424_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1424_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1424_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1424_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1447_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1447_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1447_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1447_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1470_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1470_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1470_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1470_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1493_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1493_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1493_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1493_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1516_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1516_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1516_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1516_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1539_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1539_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1539_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1539_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1562_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1562_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1562_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1562_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1585_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1585_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1585_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1585_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1608_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1608_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1608_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1608_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1631_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1631_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1631_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1631_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1654_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1654_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1654_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1654_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1677_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1677_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1677_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1677_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1700_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1700_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1700_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1700_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1723_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1723_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1723_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1723_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_1746_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_1746_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_1746_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_1746_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_32_1_1_U2210 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_0_q1,
        din1 => output_1_0_q1,
        din2 => output_2_0_q1,
        din3 => output_3_0_q1,
        def => tmp_fu_1401_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_fu_1401_p11);

    sparsemux_9_2_32_1_1_U2211 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_1_q1,
        din1 => output_1_1_q1,
        din2 => output_2_1_q1,
        din3 => output_3_1_q1,
        def => tmp_1_fu_1424_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_1_fu_1424_p11);

    sparsemux_9_2_32_1_1_U2212 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_2_q1,
        din1 => output_1_2_q1,
        din2 => output_2_2_q1,
        din3 => output_3_2_q1,
        def => tmp_2_fu_1447_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_2_fu_1447_p11);

    sparsemux_9_2_32_1_1_U2213 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_3_q1,
        din1 => output_1_3_q1,
        din2 => output_2_3_q1,
        din3 => output_3_3_q1,
        def => tmp_3_fu_1470_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_3_fu_1470_p11);

    sparsemux_9_2_32_1_1_U2214 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_4_q1,
        din1 => output_1_4_q1,
        din2 => output_2_4_q1,
        din3 => output_3_4_q1,
        def => tmp_4_fu_1493_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_4_fu_1493_p11);

    sparsemux_9_2_32_1_1_U2215 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_5_q1,
        din1 => output_1_5_q1,
        din2 => output_2_5_q1,
        din3 => output_3_5_q1,
        def => tmp_5_fu_1516_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_5_fu_1516_p11);

    sparsemux_9_2_32_1_1_U2216 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_6_q1,
        din1 => output_1_6_q1,
        din2 => output_2_6_q1,
        din3 => output_3_6_q1,
        def => tmp_6_fu_1539_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_6_fu_1539_p11);

    sparsemux_9_2_32_1_1_U2217 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_7_q1,
        din1 => output_1_7_q1,
        din2 => output_2_7_q1,
        din3 => output_3_7_q1,
        def => tmp_7_fu_1562_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_7_fu_1562_p11);

    sparsemux_9_2_32_1_1_U2218 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_0_q0,
        din1 => output_1_0_q0,
        din2 => output_2_0_q0,
        din3 => output_3_0_q0,
        def => tmp_8_fu_1585_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_8_fu_1585_p11);

    sparsemux_9_2_32_1_1_U2219 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_1_q0,
        din1 => output_1_1_q0,
        din2 => output_2_1_q0,
        din3 => output_3_1_q0,
        def => tmp_9_fu_1608_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_9_fu_1608_p11);

    sparsemux_9_2_32_1_1_U2220 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_2_q0,
        din1 => output_1_2_q0,
        din2 => output_2_2_q0,
        din3 => output_3_2_q0,
        def => tmp_s_fu_1631_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_s_fu_1631_p11);

    sparsemux_9_2_32_1_1_U2221 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_3_q0,
        din1 => output_1_3_q0,
        din2 => output_2_3_q0,
        din3 => output_3_3_q0,
        def => tmp_10_fu_1654_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_10_fu_1654_p11);

    sparsemux_9_2_32_1_1_U2222 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_4_q0,
        din1 => output_1_4_q0,
        din2 => output_2_4_q0,
        din3 => output_3_4_q0,
        def => tmp_11_fu_1677_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_11_fu_1677_p11);

    sparsemux_9_2_32_1_1_U2223 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_5_q0,
        din1 => output_1_5_q0,
        din2 => output_2_5_q0,
        din3 => output_3_5_q0,
        def => tmp_12_fu_1700_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_12_fu_1700_p11);

    sparsemux_9_2_32_1_1_U2224 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_6_q0,
        din1 => output_1_6_q0,
        din2 => output_2_6_q0,
        din3 => output_3_6_q0,
        def => tmp_13_fu_1723_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_13_fu_1723_p11);

    sparsemux_9_2_32_1_1_U2225 : component kernel_cnn_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_7_q0,
        din1 => output_1_7_q0,
        din2 => output_2_7_q0,
        din3 => output_3_7_q0,
        def => tmp_14_fu_1746_p9,
        sel => trunc_ln236_reg_1916_pp0_iter2_reg,
        dout => tmp_14_fu_1746_p11);

    flow_control_loop_pipe_sequential_init_U : component kernel_cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i0_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i0_fu_188 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_0))) then 
                    i0_fu_188 <= select_ln235_1_fu_1109_p3;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_180 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_0))) then 
                    i1_fu_180 <= select_ln236_1_fu_1129_p3;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i2_fu_172 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i2_fu_172 <= add_ln237_fu_1390_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_192 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_192 <= add_ln235_fu_1053_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_184 <= ap_const_lv12_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_184 <= select_ln236_2_fu_1219_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_176 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_0))) then 
                    indvar_fu_176 <= select_ln237_fu_1205_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln250_reg_1936 <= add_ln250_fu_1189_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                or_ln236_reg_1911 <= or_ln236_fu_1123_p2;
                trunc_ln236_reg_1916 <= trunc_ln236_fu_1171_p1;
                trunc_ln250_reg_1941 <= trunc_ln250_fu_1195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                tmp_10_reg_2321 <= tmp_10_fu_1654_p11;
                tmp_11_reg_2326 <= tmp_11_fu_1677_p11;
                tmp_12_reg_2331 <= tmp_12_fu_1700_p11;
                tmp_13_reg_2336 <= tmp_13_fu_1723_p11;
                tmp_14_reg_2341 <= tmp_14_fu_1746_p11;
                tmp_1_reg_2271 <= tmp_1_fu_1424_p11;
                tmp_2_reg_2276 <= tmp_2_fu_1447_p11;
                tmp_3_reg_2281 <= tmp_3_fu_1470_p11;
                tmp_4_reg_2286 <= tmp_4_fu_1493_p11;
                tmp_5_reg_2291 <= tmp_5_fu_1516_p11;
                tmp_6_reg_2296 <= tmp_6_fu_1539_p11;
                tmp_7_reg_2301 <= tmp_7_fu_1562_p11;
                tmp_8_reg_2306 <= tmp_8_fu_1585_p11;
                tmp_9_reg_2311 <= tmp_9_fu_1608_p11;
                tmp_reg_2266 <= tmp_fu_1401_p11;
                tmp_s_reg_2316 <= tmp_s_fu_1631_p11;
                trunc_ln236_reg_1916_pp0_iter2_reg <= trunc_ln236_reg_1916;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_1_fu_1071_p2 <= std_logic_vector(unsigned(i0_fu_188) + unsigned(ap_const_lv5_1));
    add_ln235_fu_1053_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_192) + unsigned(ap_const_lv16_1));
    add_ln236_1_fu_1213_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_184) + unsigned(ap_const_lv12_1));
    add_ln236_fu_1117_p2 <= std_logic_vector(unsigned(select_ln235_fu_1083_p3) + unsigned(ap_const_lv8_1));
    add_ln237_1_fu_1199_p2 <= std_logic_vector(unsigned(indvar_fu_176) + unsigned(ap_const_lv4_1));
    add_ln237_fu_1390_p2 <= std_logic_vector(unsigned(select_ln236_fu_1255_p3) + unsigned(ap_const_lv8_10));
    add_ln250_1_fu_1296_p2 <= std_logic_vector(unsigned(sub_ln250_1_fu_1276_p2) + unsigned(zext_ln250_3_fu_1292_p1));
    add_ln250_fu_1189_p2 <= std_logic_vector(signed(sext_ln236_fu_1167_p1) + signed(zext_ln250_2_fu_1185_p1));
    add_ln258_fu_1348_p2 <= std_logic_vector(unsigned(sub_ln250_1_fu_1276_p2) + unsigned(zext_ln258_fu_1344_p1));
    and_ln235_fu_1103_p2 <= (xor_ln235_fu_1091_p2 and icmp_ln237_fu_1097_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_kernel_output_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_kernel_output_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln235_fu_1047_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln235_fu_1047_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln271_10_fu_1805_p1 <= tmp_s_reg_2316;
    bitcast_ln271_11_fu_1808_p1 <= tmp_10_reg_2321;
    bitcast_ln271_12_fu_1811_p1 <= tmp_11_reg_2326;
    bitcast_ln271_13_fu_1814_p1 <= tmp_12_reg_2331;
    bitcast_ln271_14_fu_1817_p1 <= tmp_13_reg_2336;
    bitcast_ln271_15_fu_1820_p1 <= tmp_14_reg_2341;
    bitcast_ln271_1_fu_1778_p1 <= tmp_1_reg_2271;
    bitcast_ln271_2_fu_1781_p1 <= tmp_2_reg_2276;
    bitcast_ln271_3_fu_1784_p1 <= tmp_3_reg_2281;
    bitcast_ln271_4_fu_1787_p1 <= tmp_4_reg_2286;
    bitcast_ln271_5_fu_1790_p1 <= tmp_5_reg_2291;
    bitcast_ln271_6_fu_1793_p1 <= tmp_6_reg_2296;
    bitcast_ln271_7_fu_1796_p1 <= tmp_7_reg_2301;
    bitcast_ln271_8_fu_1799_p1 <= tmp_8_reg_2306;
    bitcast_ln271_9_fu_1802_p1 <= tmp_9_reg_2311;
    bitcast_ln271_fu_1775_p1 <= tmp_reg_2266;
    icmp_ln235_fu_1047_p2 <= "1" when (indvar_flatten13_fu_192 = ap_const_lv16_C400) else "0";
    icmp_ln236_fu_1077_p2 <= "1" when (indvar_flatten_fu_184 = ap_const_lv12_C40) else "0";
    icmp_ln237_fu_1097_p2 <= "1" when (indvar_fu_176 = ap_const_lv4_E) else "0";

    kernel_output_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            kernel_output_blk_n_W <= m_axi_kernel_output_WREADY;
        else 
            kernel_output_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    lshr_ln1_fu_1282_p4 <= select_ln236_fu_1255_p3(7 downto 3);
    lshr_ln_fu_1175_p4 <= select_ln236_1_fu_1129_p3(7 downto 2);
    m_axi_kernel_output_ARADDR <= ap_const_lv64_0;
    m_axi_kernel_output_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_output_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_ARID <= ap_const_lv1_0;
    m_axi_kernel_output_ARLEN <= ap_const_lv32_0;
    m_axi_kernel_output_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_output_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_output_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_output_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_ARUSER <= ap_const_lv1_0;
    m_axi_kernel_output_ARVALID <= ap_const_logic_0;
    m_axi_kernel_output_AWADDR <= ap_const_lv64_0;
    m_axi_kernel_output_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_output_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_AWID <= ap_const_lv1_0;
    m_axi_kernel_output_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_output_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_output_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_output_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_output_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_output_AWVALID <= ap_const_logic_0;
    m_axi_kernel_output_BREADY <= ap_const_logic_0;
    m_axi_kernel_output_RREADY <= ap_const_logic_0;
    m_axi_kernel_output_WDATA <= (((((((((((((((bitcast_ln271_15_fu_1820_p1 & bitcast_ln271_14_fu_1817_p1) & bitcast_ln271_13_fu_1814_p1) & bitcast_ln271_12_fu_1811_p1) & bitcast_ln271_11_fu_1808_p1) & bitcast_ln271_10_fu_1805_p1) & bitcast_ln271_9_fu_1802_p1) & bitcast_ln271_8_fu_1799_p1) & bitcast_ln271_7_fu_1796_p1) & bitcast_ln271_6_fu_1793_p1) & bitcast_ln271_5_fu_1790_p1) & bitcast_ln271_4_fu_1787_p1) & bitcast_ln271_3_fu_1784_p1) & bitcast_ln271_2_fu_1781_p1) & bitcast_ln271_1_fu_1778_p1) & bitcast_ln271_fu_1775_p1);
    m_axi_kernel_output_WID <= ap_const_lv1_0;
    m_axi_kernel_output_WLAST <= ap_const_logic_0;
    m_axi_kernel_output_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_kernel_output_WUSER <= ap_const_lv1_0;

    m_axi_kernel_output_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            m_axi_kernel_output_WVALID <= ap_const_logic_1;
        else 
            m_axi_kernel_output_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln236_fu_1123_p2 <= (icmp_ln236_fu_1077_p2 or and_ln235_fu_1103_p2);
    or_ln258_fu_1338_p2 <= (lshr_ln1_fu_1282_p4 or ap_const_lv5_1);
    output_0_0_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_0_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_0_ce0 <= ap_const_logic_1;
        else 
            output_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_0_ce1 <= ap_const_logic_1;
        else 
            output_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_1_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_1_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_1_ce0 <= ap_const_logic_1;
        else 
            output_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_1_ce1 <= ap_const_logic_1;
        else 
            output_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_2_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_2_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_2_ce0 <= ap_const_logic_1;
        else 
            output_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_2_ce1 <= ap_const_logic_1;
        else 
            output_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_3_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_3_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_3_ce0 <= ap_const_logic_1;
        else 
            output_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_3_ce1 <= ap_const_logic_1;
        else 
            output_0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_4_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_4_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_4_ce0 <= ap_const_logic_1;
        else 
            output_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_4_ce1 <= ap_const_logic_1;
        else 
            output_0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_5_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_5_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_5_ce0 <= ap_const_logic_1;
        else 
            output_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_5_ce1 <= ap_const_logic_1;
        else 
            output_0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_6_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_6_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_6_ce0 <= ap_const_logic_1;
        else 
            output_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_6_ce1 <= ap_const_logic_1;
        else 
            output_0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_7_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_0_7_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_0_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_7_ce0 <= ap_const_logic_1;
        else 
            output_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_7_ce1 <= ap_const_logic_1;
        else 
            output_0_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_0_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_0_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_0_ce0 <= ap_const_logic_1;
        else 
            output_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_0_ce1 <= ap_const_logic_1;
        else 
            output_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_1_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_1_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_1_ce0 <= ap_const_logic_1;
        else 
            output_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_1_ce1 <= ap_const_logic_1;
        else 
            output_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_2_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_2_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_2_ce0 <= ap_const_logic_1;
        else 
            output_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_2_ce1 <= ap_const_logic_1;
        else 
            output_1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_3_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_3_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_3_ce0 <= ap_const_logic_1;
        else 
            output_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_3_ce1 <= ap_const_logic_1;
        else 
            output_1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_4_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_4_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_4_ce0 <= ap_const_logic_1;
        else 
            output_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_4_ce1 <= ap_const_logic_1;
        else 
            output_1_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_5_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_5_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_5_ce0 <= ap_const_logic_1;
        else 
            output_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_5_ce1 <= ap_const_logic_1;
        else 
            output_1_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_6_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_6_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_6_ce0 <= ap_const_logic_1;
        else 
            output_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_6_ce1 <= ap_const_logic_1;
        else 
            output_1_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_7_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_1_7_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_1_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_7_ce0 <= ap_const_logic_1;
        else 
            output_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_7_ce1 <= ap_const_logic_1;
        else 
            output_1_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_0_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_0_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_0_ce0 <= ap_const_logic_1;
        else 
            output_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_0_ce1 <= ap_const_logic_1;
        else 
            output_2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_1_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_1_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_1_ce0 <= ap_const_logic_1;
        else 
            output_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_1_ce1 <= ap_const_logic_1;
        else 
            output_2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_2_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_2_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_2_ce0 <= ap_const_logic_1;
        else 
            output_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_2_ce1 <= ap_const_logic_1;
        else 
            output_2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_3_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_3_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_3_ce0 <= ap_const_logic_1;
        else 
            output_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_3_ce1 <= ap_const_logic_1;
        else 
            output_2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_4_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_4_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_4_ce0 <= ap_const_logic_1;
        else 
            output_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_4_ce1 <= ap_const_logic_1;
        else 
            output_2_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_5_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_5_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_5_ce0 <= ap_const_logic_1;
        else 
            output_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_5_ce1 <= ap_const_logic_1;
        else 
            output_2_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_6_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_6_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_6_ce0 <= ap_const_logic_1;
        else 
            output_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_6_ce1 <= ap_const_logic_1;
        else 
            output_2_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_7_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_2_7_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_2_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_7_ce0 <= ap_const_logic_1;
        else 
            output_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_7_ce1 <= ap_const_logic_1;
        else 
            output_2_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_0_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_0_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_0_ce0 <= ap_const_logic_1;
        else 
            output_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_0_ce1 <= ap_const_logic_1;
        else 
            output_3_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_1_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_1_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_1_ce0 <= ap_const_logic_1;
        else 
            output_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_1_ce1 <= ap_const_logic_1;
        else 
            output_3_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_2_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_2_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_2_ce0 <= ap_const_logic_1;
        else 
            output_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_2_ce1 <= ap_const_logic_1;
        else 
            output_3_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_3_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_3_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_3_ce0 <= ap_const_logic_1;
        else 
            output_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_3_ce1 <= ap_const_logic_1;
        else 
            output_3_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_4_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_4_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_4_ce0 <= ap_const_logic_1;
        else 
            output_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_4_ce1 <= ap_const_logic_1;
        else 
            output_3_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_5_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_5_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_5_ce0 <= ap_const_logic_1;
        else 
            output_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_5_ce1 <= ap_const_logic_1;
        else 
            output_3_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_6_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_6_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_6_ce0 <= ap_const_logic_1;
        else 
            output_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_6_ce1 <= ap_const_logic_1;
        else 
            output_3_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_7_address0 <= zext_ln258_1_fu_1354_p1(15 - 1 downto 0);
    output_3_7_address1 <= zext_ln250_4_fu_1302_p1(15 - 1 downto 0);

    output_3_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_7_ce0 <= ap_const_logic_1;
        else 
            output_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_7_ce1 <= ap_const_logic_1;
        else 
            output_3_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln235_1_fu_1109_p3 <= 
        add_ln235_1_fu_1071_p2 when (icmp_ln236_fu_1077_p2(0) = '1') else 
        i0_fu_188;
    select_ln235_fu_1083_p3 <= 
        ap_const_lv8_0 when (icmp_ln236_fu_1077_p2(0) = '1') else 
        i1_fu_180;
    select_ln236_1_fu_1129_p3 <= 
        add_ln236_fu_1117_p2 when (and_ln235_fu_1103_p2(0) = '1') else 
        select_ln235_fu_1083_p3;
    select_ln236_2_fu_1219_p3 <= 
        ap_const_lv12_1 when (icmp_ln236_fu_1077_p2(0) = '1') else 
        add_ln236_1_fu_1213_p2;
    select_ln236_fu_1255_p3 <= 
        ap_const_lv8_0 when (or_ln236_reg_1911(0) = '1') else 
        i2_fu_172;
    select_ln237_fu_1205_p3 <= 
        ap_const_lv4_1 when (or_ln236_fu_1123_p2(0) = '1') else 
        add_ln237_1_fu_1199_p2;
        sext_ln236_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln250_fu_1161_p2),13));

    sub_ln250_1_fu_1276_p2 <= std_logic_vector(unsigned(tmp_17_fu_1262_p3) - unsigned(tmp_18_fu_1269_p3));
    sub_ln250_fu_1161_p2 <= std_logic_vector(unsigned(zext_ln250_fu_1145_p1) - unsigned(zext_ln250_1_fu_1157_p1));
    tmp_10_fu_1654_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_11_fu_1677_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_12_fu_1700_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_13_fu_1723_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_14_fu_1746_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_15_fu_1137_p3 <= (select_ln235_1_fu_1109_p3 & ap_const_lv6_0);
    tmp_16_fu_1149_p3 <= (select_ln235_1_fu_1109_p3 & ap_const_lv3_0);
    tmp_17_fu_1262_p3 <= (trunc_ln250_reg_1941 & ap_const_lv5_0);
    tmp_18_fu_1269_p3 <= (add_ln250_reg_1936 & ap_const_lv2_0);
    tmp_1_fu_1424_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_1447_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_3_fu_1470_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_4_fu_1493_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_5_fu_1516_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_1539_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_7_fu_1562_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_8_fu_1585_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_1608_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_1401_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_1631_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln236_fu_1171_p1 <= select_ln236_1_fu_1129_p3(2 - 1 downto 0);
    trunc_ln250_fu_1195_p1 <= add_ln250_fu_1189_p2(10 - 1 downto 0);
    xor_ln235_fu_1091_p2 <= (icmp_ln236_fu_1077_p2 xor ap_const_lv1_1);
    zext_ln250_1_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1149_p3),12));
    zext_ln250_2_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1175_p4),13));
    zext_ln250_3_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_1282_p4),15));
    zext_ln250_4_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln250_1_fu_1296_p2),64));
    zext_ln250_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1137_p3),12));
    zext_ln258_1_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln258_fu_1348_p2),64));
    zext_ln258_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln258_fu_1338_p2),15));
end behav;
